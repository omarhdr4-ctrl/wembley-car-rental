import React, { useState, useEffect } from 'react';
import { createClient } from '@supabase/supabase-js';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, LineChart, Line } from 'recharts';
// Add this CSS style block here
const styles = `
  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
  }
`;

// Inject the styles into the document head
if (typeof document !== 'undefined') {
  const styleSheet = document.createElement('style');
  styleSheet.innerText = styles;
  document.head.appendChild(styleSheet);
}
const supabaseUrl = 'https://oacqcngsdwlqynbausyk.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9hY3FjbmdzZHdscXluYmF1c3lrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTc2MTI4NzksImV4cCI6MjA3MzE4ODg3OX0.H7WZiF6ntY6FKNxdJPrsyGe_lThHoVoUD4pCLeSzueE';
const supabase = createClient(supabaseUrl, supabaseKey);

const RentalCarApp = () => {
// View state management
  const [selectedCar, setSelectedCar] = useState(null);
  const [showBookingForm, setShowBookingForm] = useState(false);
  const [showReservations, setShowReservations] = useState(false);
  const [showClients, setShowClients] = useState(false);
  const [showClientForm, setShowClientForm] = useState(false);
  const [showFreePeriods, setShowFreePeriods] = useState(false);
  const [showStats, setShowStats] = useState(false);
  const [showCharges, setShowCharges] = useState(false);
  const [showChargeForm, setShowChargeForm] = useState(false);
  const [showCarManagement, setShowCarManagement] = useState(false);
 const [showCarForm, setShowCarForm] = useState(false);
 const [showDocuments, setShowDocuments] = useState(false);
const [showDocumentForm, setShowDocumentForm] = useState(false);
  const [selectedYear, setSelectedYear] = useState('all');
const [editingDocument, setEditingDocument] = useState(null);
  const [editingCharge, setEditingCharge] = useState(null);

  // Edit state management
  const [editingReservation, setEditingReservation] = useState(null);
  const [editingClient, setEditingClient] = useState(null);
  const [editingCar, setEditingCar] = useState(null);
  
  // Data state management
  const [bookings, setBookings] = useState({});
  const [clients, setClients] = useState([]);
  const [charges, setCharges] = useState([]);
  const [loading, setLoading] = useState(false);
  const [dataLoaded, setDataLoaded] = useState({
  cars: false,
  bookings: false,
  clients: false,
  charges: false,
  documents: false,
  oilChanges: false
});
  
  // Form state management
  const [selectedDates, setSelectedDates] = useState({ start: '', end: '' });
  const [customerInfo, setCustomerInfo] = useState({ 
    name: '', email: '', phone: '', arrivalTime: '', departureTime: '', remarks: '' 
  });
  const [chargeFormData, setChargeFormData] = useState({
  description: '', date: '', amount: 0, carId: '', carName: '', plateNumber: '', remarks: '', category: 'maintenance'
});
 const [clientFormData, setClientFormData] = useState({
  clientName: '', phone: '', carName: '', plateNumber: '', startDate: '', startTime: '', endDate: '', endTime: '',
  totalAmount: 0, advancePayment: 0, fullPayment: false
});
const [carFormData, setCarFormData] = useState({
  name: '', plate_number: '', price: 0, seats: 5, fuel: 'Gasoline'
});
const [documentFormData, setDocumentFormData] = useState({
  carId: '', carName: '', plateNumber: '', documentType: '', startDate: '', endDate: '', file: null, fileName: ''
});
const [oilChangeFormData, setOilChangeFormData] = useState({
  carId: '', carName: '', plateNumber: '', date: '', location: '', 
  currentKm: 0, itemsChanged: '', cost: 0, nextServiceKm: 0, remarks: ''
});
  
  // Filter state management
  const [filterDates, setFilterDates] = useState({ start: '', end: '' });
  const [showAvailableOnly, setShowAvailableOnly] = useState(false);

// Car data - now loaded from database
const [cars, setCars] = useState([]);
const [documents, setDocuments] = useState([]);
const [oilChanges, setOilChanges] = useState([]);
const [showOilChanges, setShowOilChanges] = useState(false);
const [showOilChangeForm, setShowOilChangeForm] = useState(false);
const [editingOilChange, setEditingOilChange] = useState(null);

// Client database operations
 const loadClients = async () => {
  try {
    const { data, error } = await supabase
      .from('clients')
      .select('*')
      .order('start_date', { ascending: false });
    
    if (error) {
      console.error('Error loading clients:', error);
      return false;
    }
    
    setClients(data || []);
    setDataLoaded(prev => ({...prev, clients: true}));
    return true;
  } catch (error) {
    console.error('Error:', error);
    return false;
  }
};
  const saveClient = async (clientData) => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('clients')
        .insert([{
          client_name: clientData.clientName,
          phone: clientData.phone || null,
          car_name: clientData.carName,
          start_date: clientData.startDate,
          start_time: clientData.startTime || null,
          end_date: clientData.endDate,
          end_time: clientData.endTime || null,
          total_amount: clientData.totalAmount || 0,
          advance_payment: clientData.advancePayment || 0,
          full_payment: clientData.fullPayment || false
        }])
        .select();
      
      if (error) {
        console.error('Error saving client:', error);
        alert('Error saving client to database');
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('Error:', error);
      alert('Error connecting to database');
      return false;
    } finally {
      setLoading(false);
    }
  };

  const updateClient = async (clientData) => {
    try {
      setLoading(true);
      const { error } = await supabase
        .from('clients')
        .update({
          client_name: clientData.clientName,
          phone: clientData.phone,
          car_name: clientData.carName,
          start_date: clientData.startDate,
          start_time: clientData.startTime,
          end_date: clientData.endDate,
          end_time: clientData.endTime,
          total_amount: clientData.totalAmount || 0,
          advance_payment: clientData.advancePayment || 0,
          full_payment: clientData.fullPayment || false
        })
        .eq('id', editingClient.id);
      
      if (error) {
        console.error('Error updating client:', error);
        alert('Error updating client in database');
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('Error:', error);
      alert('Error connecting to database');
      return false;
    } finally {
      setLoading(false);
    }
  };

  const deleteClient = async (clientId) => {
    try {
      setLoading(true);
      const { error } = await supabase
        .from('clients')
        .delete()
        .eq('id', clientId);
      
      if (error) {
        console.error('Error deleting client:', error);
        alert('Error deleting client from database');
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('Error:', error);
      alert('Error connecting to database');
      return false;
    } finally {
      setLoading(false);
    }
  };
// Charges database operations
 const loadCharges = async () => {
  try {
    const { data, error } = await supabase
      .from('charges')
      .select('*')
      .order('date', { ascending: false });
    
    if (error) {
      console.error('Error loading charges:', error);
      return false;
    }
    
    setCharges(data || []);
    setDataLoaded(prev => ({...prev, charges: true}));
    return true;
  } catch (error) {
    console.error('Error:', error);
    return false;
  }
};

  const saveCharge = async (chargeData) => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('charges')
        .insert([{
          description: chargeData.description,
          date: chargeData.date,
          amount: chargeData.amount,
          car_id: chargeData.carId || null,
          car_name: chargeData.carName || null,
          remarks: chargeData.remarks || null,
          category: chargeData.category
        }])
        .select();
      
      if (error) {
        console.error('Error saving charge:', error);
        alert('Error saving charge to database');
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('Error:', error);
      alert('Error connecting to database');
      return false;
    } finally {
      setLoading(false);
    }
  };

  const updateCharge = async (chargeData) => {
    try {
      setLoading(true);
      const { error } = await supabase
        .from('charges')
        .update({
          description: chargeData.description,
          date: chargeData.date,
          amount: chargeData.amount,
          car_id: chargeData.carId || null,
          car_name: chargeData.carName || null,
          remarks: chargeData.remarks || null,
          category: chargeData.category
        })
        .eq('id', editingCharge.id);
      
      if (error) {
        console.error('Error updating charge:', error);
        alert('Error updating charge in database');
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('Error:', error);
      alert('Error connecting to database');
      return false;
    } finally {
      setLoading(false);
    }
  };

  const deleteCharge = async (chargeId) => {
    try {
      setLoading(true);
      const { error } = await supabase
        .from('charges')
        .delete()
        .eq('id', chargeId);
      
      if (error) {
        console.error('Error deleting charge:', error);
        alert('Error deleting charge from database');
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('Error:', error);
      alert('Error connecting to database');
      return false;
    } finally {
      setLoading(false);
    }
  };
// Document database operations
const loadDocuments = async () => {
  try {
    const { data, error } = await supabase
      .from('documents')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('Error loading documents:', error);
      return false;
    }
    
    setDocuments(data || []);
    setDataLoaded(prev => ({...prev, documents: true}));
    return true;
  } catch (error) {
    console.error('Error:', error);
    return false;
  }
};

const saveDocument = async (documentData) => {
  try {
    setLoading(true); 
    let fileUrl = '';
    let fileName = '';  // Move this declaration here
    // If there's a file to upload
    if (documentData.file) {
const fileExt = documentData.file.name.split('.').pop();
const cleanCarName = documentData.carName.replace(/[^a-zA-Z0-9]/g, '_');
const cleanDocType = documentData.documentType.replace(/[^a-zA-Z0-9]/g, '_');
fileName = `${cleanCarName}_${cleanDocType}_${Date.now()}.${fileExt}`;
      
      // Upload to Supabase storage
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('documents')
        .upload(fileName, documentData.file);
      
      if (uploadError) {
        console.error('Error uploading file:', uploadError);
        alert('Error uploading file: ' + uploadError.message);
        return false;
      }
      
      // Get public URL
      const { data: urlData } = supabase.storage
        .from('documents')
        .getPublicUrl(fileName);
      
      fileUrl = urlData.publicUrl;
    }
    
    const { data, error } = await supabase
      .from('documents')
      .insert([{
        car_id: documentData.carId,
        car_name: documentData.carName,
        document_type: documentData.documentType,
        start_date: documentData.startDate,
        end_date: documentData.endDate,
        file_url: fileUrl,
        file_name: fileName
      }])
      .select();
    
    if (error) {
      console.error('Error saving document:', error);
      alert('Error saving document to database');
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('Error:', error);
    alert('Error connecting to database');
    return false;
  } finally {
    setLoading(false);
  }
};
const updateDocument = async (documentData) => {
  try {
    setLoading(true);
    
    let updateData = {
      document_type: documentData.documentType,
      start_date: documentData.startDate,
      end_date: documentData.endDate
    };
    
    // If there's a new file to upload
   if (documentData.file) {
  const fileExt = documentData.file.name.split('.').pop();
  const cleanCarName = documentData.carName.replace(/[^a-zA-Z0-9]/g, '_');
  const cleanDocType = documentData.documentType.replace(/[^a-zA-Z0-9]/g, '_');
  const fileName = `${cleanCarName}_${cleanDocType}_${Date.now()}.${fileExt}`;
      
      // Upload new file to Supabase storage
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('documents')
        .upload(fileName, documentData.file);
      
      if (uploadError) {
        console.error('Error uploading file:', uploadError);
        alert('Error uploading file: ' + uploadError.message);
        return false;
      }
      
      // Get public URL for new file
      const { data: urlData } = supabase.storage
        .from('documents')
        .getPublicUrl(fileName);
      
      updateData.file_url = urlData.publicUrl;
      updateData.file_name = fileName;
      
      // Delete old file if it exists
      if (editingDocument.file_name) {
        await supabase.storage
          .from('documents')
          .remove([editingDocument.file_name]);
      }
    }
    
    const { error } = await supabase
      .from('documents')
      .update(updateData)
      .eq('id', editingDocument.id);
    
    if (error) {
      console.error('Error updating document:', error);
      alert('Error updating document in database');
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('Error:', error);
    alert('Error connecting to database');
    return false;
  } finally {
    setLoading(false);
  }
};
const deleteDocument = async (documentId) => {
  try {
    setLoading(true);
    
    // First get the document to find the file name
    const { data: doc, error: fetchError } = await supabase
      .from('documents')
      .select('file_name')
      .eq('id', documentId)
      .single();
    
    if (!fetchError && doc && doc.file_name) {
      // Delete file from storage
      await supabase.storage
        .from('documents')
        .remove([doc.file_name]);
    }
    
    // Delete document record from database
    const { error } = await supabase
      .from('documents')
      .delete()
      .eq('id', documentId);
    
    if (error) {
      console.error('Error deleting document:', error);
      alert('Error deleting document from database');
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('Error:', error);
    alert('Error connecting to database');
    return false;
  } finally {
    setLoading(false);
  }
};
// Oil Change database operations
const loadOilChanges = async () => {
  try {
    const { data, error } = await supabase
      .from('oil_changes')
      .select('*')
      .order('date', { ascending: false });
    
    if (error) {
      console.error('Error loading oil changes:', error);
      return false;
    }
    
    setOilChanges(data || []);
    setDataLoaded(prev => ({...prev, oilChanges: true}));
    return true;
  } catch (error) {
    console.error('Error:', error);
    return false;
  }
};

const saveOilChange = async (oilChangeData) => {
  try {
    setLoading(true);
// DEBUG: Log what we're about to send
    console.log('Sending oil change data:', oilChangeData);
    
    const dataToInsert = {
      car_id: oilChangeData.carId || null,
      car_name: oilChangeData.carName || null,
      plate_number: oilChangeData.plateNumber || null,
      date: oilChangeData.date,
      location: oilChangeData.location || null,
      current_km: parseInt(oilChangeData.currentKm) || 0,
      items_changed: oilChangeData.itemsChanged || null,
      cost: parseFloat(oilChangeData.cost) || 0,
      next_service_km: parseInt(oilChangeData.nextServiceKm) || null,
      remarks: oilChangeData.remarks || null
    };
    
    console.log('Processed data:', dataToInsert);
    const { data, error } = await supabase
      .from('oil_changes')
      .insert([{
        car_id: oilChangeData.carId,
        car_name: oilChangeData.carName,
        plate_number: oilChangeData.plateNumber,
        date: oilChangeData.date,
        location: oilChangeData.location,
        current_km: oilChangeData.currentKm,
        items_changed: oilChangeData.itemsChanged,
        cost: oilChangeData.cost,
        next_service_km: oilChangeData.nextServiceKm,
        remarks: oilChangeData.remarks
      }])
      .select();
    
    if (error) {
      console.error('Error saving oil change:', error);
      alert('Error saving oil change to database');
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('Error:', error);
    alert('Error connecting to database');
    return false;
  } finally {
    setLoading(false);
  }
};

const updateOilChange = async (oilChangeData) => {
  try {
    setLoading(true);
    const { error } = await supabase
      .from('oil_changes')
      .update({
        date: oilChangeData.date,
        location: oilChangeData.location,
        current_km: oilChangeData.currentKm,
        items_changed: oilChangeData.itemsChanged,
        cost: oilChangeData.cost,
        next_service_km: oilChangeData.nextServiceKm,
        remarks: oilChangeData.remarks
      })
      .eq('id', editingOilChange.id);
    
    if (error) {
      console.error('Error updating oil change:', error);
      alert('Error updating oil change in database');
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('Error:', error);
    alert('Error connecting to database');
    return false;
  } finally {
    setLoading(false);
  }
};

const deleteOilChange = async (oilChangeId) => {
  try {
    setLoading(true);
    const { error } = await supabase
      .from('oil_changes')
      .delete()
      .eq('id', oilChangeId);
    
    if (error) {
      console.error('Error deleting oil change:', error);
      alert('Error deleting oil change from database');
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('Error:', error);
    alert('Error connecting to database');
    return false;
  } finally {
    setLoading(false);
  }
};
// Oil Change helper functions
const getOverdueOilChanges = () => {
  const today = new Date();
  const fiveMonthsAgo = new Date();
  fiveMonthsAgo.setMonth(today.getMonth() - 5);
  
  return oilChanges.filter(oilChange => {
    const serviceDate = new Date(oilChange.date);
    return serviceDate <= fiveMonthsAgo;
  });
};

const getUpcomingOilChanges = () => {
  return oilChanges.filter(oilChange => {
    const kmSinceService = (oilChange.next_service_km || (oilChange.current_km + 10000)) - oilChange.current_km;
    return kmSinceService <= 2000; // Alert when within 2000 km of service
  });
};

const getOilChangeStatus = (oilChange) => {
  const today = new Date();
  const serviceDate = new Date(oilChange.date);
  const fiveMonthsAgo = new Date();
  fiveMonthsAgo.setMonth(today.getMonth() - 5);
  
  const kmSinceService = (oilChange.next_service_km || (oilChange.current_km + 10000)) - oilChange.current_km;
  
  if (serviceDate <= fiveMonthsAgo || kmSinceService <= 0) {
    return { status: 'OVERDUE', color: '#dc2626', bgColor: '#fee2e2' };
  } else if (kmSinceService <= 2000) {
    return { status: 'DUE SOON', color: '#d97706', bgColor: '#fef3c7' };
  } else {
    return { status: 'OK', color: '#059669', bgColor: '#dcfce7' };
  }
};
// Document helper functions
const getExpiringDocuments = () => {
  const oneWeekFromNow = new Date();
  oneWeekFromNow.setDate(oneWeekFromNow.getDate() + 7);
  
  return documents.filter(doc => {
    const endDate = new Date(doc.end_date);
    const today = new Date();
    return endDate <= oneWeekFromNow && endDate >= today;
  });
};

const getExpiredDocuments = () => {
  const today = new Date();
  return documents.filter(doc => {
    const endDate = new Date(doc.end_date);
    return endDate < today;
  });
};

const getDocumentStatus = (endDate) => {
  const today = new Date();
  const end = new Date(endDate);
  const oneWeekFromNow = new Date();
  oneWeekFromNow.setDate(oneWeekFromNow.getDate() + 7);
  
  if (end < today) {
    return { status: 'EXPIRED', color: '#dc2626', bgColor: '#fee2e2' };
  } else if (end <= oneWeekFromNow) {
    return { status: 'EXPIRING SOON', color: '#d97706', bgColor: '#fef3c7' };
  } else {
    return { status: 'VALID', color: '#059669', bgColor: '#dcfce7' };
  }
};

const downloadDocument = (document) => {
  console.log('Full document object:', document);
  console.log('file_url:', document.file_url);
  console.log('file_name:', document.file_name);
  if (document.file_url) {
    const link = window.document.createElement('a');
    link.href = document.file_url;
    link.download = document.file_name || 'document';
    link.target = '_blank';
    window.document.body.appendChild(link);
    link.click();
    window.document.body.removeChild(link);
  } else {
    alert('No file available for download');
  }
};
// Document form handlers
const handleDocumentSubmit = async () => {
  if (!documentFormData.carId || !documentFormData.documentType || !documentFormData.startDate || !documentFormData.endDate) {
    alert('Please fill in all required fields');
    return;
  }

  if (editingDocument) {
    const success = await updateDocument(documentFormData);
    if (success) {
      alert('Document updated successfully!');
      await loadDocuments();
      setEditingDocument(null);
    }
  } else {
    const success = await saveDocument(documentFormData);
    if (success) {
      alert('Document added successfully!');
      await loadDocuments();
    }
  }
  
  setShowDocumentForm(false);
  setDocumentFormData({
    carId: '', carName: '', documentType: '', startDate: '', endDate: '', file: null, fileName: ''
  });
};

const handleEditDocument = (document) => {
  setDocumentFormData({
    carId: document.car_id,
    carName: document.car_name,
    documentType: document.document_type,
    startDate: document.start_date,
    endDate: document.end_date,
    file: null,
    fileName: document.file_name || ''
  });
  setEditingDocument(document);
  setShowDocumentForm(true);
};

const handleDeleteDocument = async (document) => {
  if (window.confirm(`Are you sure you want to delete this ${document.document_type} document for ${document.car_name}?`)) {
    const success = await deleteDocument(document.id);
    if (success) {
      alert('Document deleted successfully!');
      await loadDocuments();
    }
  }
};
// Booking database operations
  const loadBookings = async () => {
  try {
    const { data, error } = await supabase
      .from('bookings')
      .select('*')
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('Error loading bookings:', error);
      return false;
    }
    
    const bookingsByCarId = {};
    if (data) {
      data.forEach(booking => {
        if (!bookingsByCarId[booking.car_id]) {
          bookingsByCarId[booking.car_id] = [];
        }
        bookingsByCarId[booking.car_id].push({
          id: booking.id,
          carId: booking.car_id,
          start: booking.start_date,
          end: booking.end_date,
          customer: {
            name: booking.customer_name || '',
            email: booking.customer_email || '',
            phone: booking.customer_phone || '',
            arrivalTime: booking.arrival_time || '',
            departureTime: booking.departure_time || '',
            remarks: booking.remarks || ''
          },
          total: booking.total_amount,
          carName: booking.car_name,
          carType: booking.car_type
        });
      });
    }
    
    setBookings(bookingsByCarId);
    setDataLoaded(prev => ({...prev, bookings: true}));
    return true;
  } catch (error) {
    console.error('Error:', error);
    return false;
  }
};
  const saveBooking = async (booking) => {
    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('bookings')
        .insert([{
          car_id: booking.carId,
          car_name: booking.carName,
          car_type: booking.carType,
          start_date: booking.start,
          end_date: booking.end,
          customer_name: booking.customer.name,
          customer_email: booking.customer.email || null,
          customer_phone: booking.customer.phone || null,
          arrival_time: booking.customer.arrivalTime || null,
          departure_time: booking.customer.departureTime || null,
          remarks: booking.customer.remarks || null,
          total_amount: booking.total
        }])
        .select();
      
      if (error) {
        console.error('Error saving booking:', error);
        alert('Error saving booking to database');
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('Error:', error);
      alert('Error connecting to database');
      return false;
    } finally {
      setLoading(false);
    }
  };

  const updateBooking = async (booking) => {
    try {
      setLoading(true);
      const { error } = await supabase
        .from('bookings')
        .update({
          start_date: booking.start,
          end_date: booking.end,
          customer_name: booking.customer.name,
          customer_email: booking.customer.email || null,
          customer_phone: booking.customer.phone || null,
          arrival_time: booking.customer.arrivalTime || null,
          departure_time: booking.customer.departureTime || null,
          remarks: booking.customer.remarks || null,
          total_amount: booking.total
        })
        .eq('id', booking.id);
      
      if (error) {
        console.error('Error updating booking:', error);
        alert('Error updating booking in database');
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('Error:', error);
      alert('Error connecting to database');
      return false;
    } finally {
      setLoading(false);
    }
  };

  const deleteBookingFromDB = async (bookingId) => {
    try {
      setLoading(true);
      const { error } = await supabase
        .from('bookings')
        .delete()
        .eq('id', bookingId);
      
      if (error) {
        console.error('Error deleting booking:', error);
        alert('Error deleting booking from database');
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('Error:', error);
      alert('Error connecting to database');
      return false;
    } finally {
      setLoading(false);
    }
  };

// Car database operations
 const loadCars = async () => {
  try {
    const { data, error } = await supabase
      .from('cars')
      .select('*')
      .order('id', { ascending: true });
    
    if (error) {
      console.error('Error loading cars:', error);
      return false;
    }
    
    setCars(data || []);
    setDataLoaded(prev => ({...prev, cars: true}));
    return true;
  } catch (error) {
    console.error('Error:', error);
    return false;
  }
};

  const saveCar = async (carData) => {
    try {
      setLoading(true);
     const { data, error } = await supabase
  .from('cars')
  .insert([{
    name: carData.name,
    plate_number: carData.plate_number,
    price: carData.price,
    seats: carData.seats,
    fuel: carData.fuel
  }])
        .select();
      
      if (error) {
        console.error('Error saving car:', error);
        alert('Error saving car to database');
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('Error:', error);
      alert('Error connecting to database');
      return false;
    } finally {
      setLoading(false);
    }
  };

  const updateCar = async (carData, carId) => {
    try {
      setLoading(true);
      const { error } = await supabase
  .from('cars')
  .update({
    name: carData.name,
    plate_number: carData.plate_number,
    price: carData.price,
    seats: carData.seats,
    fuel: carData.fuel
  })
        .eq('id', carId);
      
      if (error) {
        console.error('Error updating car:', error);
        alert('Error updating car in database');
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('Error:', error);
      alert('Error connecting to database');
      return false;
    } finally {
      setLoading(false);
    }
  };

  const deleteCar = async (carId) => {
    try {
      setLoading(true);
      const { error } = await supabase
        .from('cars')
        .delete()
        .eq('id', carId);
      
      if (error) {
        console.error('Error deleting car:', error);
        alert('Error deleting car from database');
        return false;
      }
      
      return true;
    } catch (error) {
      console.error('Error:', error);
      alert('Error connecting to database');
      return false;
    } finally {
      setLoading(false);
    }
  };

// Utility functions
  // Enhanced data loading function
const ensureAllDataLoaded = async () => {
  const loadingPromises = [];
  
  if (!dataLoaded.cars) {
    loadingPromises.push(loadCars());
  }
  if (!dataLoaded.bookings) {
    loadingPromises.push(loadBookings());
  }
  if (!dataLoaded.clients) {
    loadingPromises.push(loadClients());
  }
  if (!dataLoaded.charges) {
    loadingPromises.push(loadCharges());
  }
  if (!dataLoaded.documents) {
    loadingPromises.push(loadDocuments());
  }
  
  if (loadingPromises.length > 0) {
    setLoading(true);
    try {
      await Promise.all(loadingPromises);
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  }
};

// Utility functions

  const formatDate = (dateStr) => {
    return new Date(dateStr).toLocaleDateString();
  };

  const formatDateTime = (dateStr, timeStr) => {
    const date = formatDate(dateStr);
    return timeStr ? `${date} ${timeStr}` : date;
  };

  const calculateTotal = () => {
    if (!selectedDates.start || !selectedDates.end || !selectedCar) return 0;
    const start = new Date(selectedDates.start);
    const end = new Date(selectedDates.end);
    const days = Math.ceil((end - start) / (1000 * 60 * 60 * 24));
    const rentalDays = days === 0 ? 1 : days;
    return rentalDays * selectedCar.price;
  };

  const calculateSuggestedTotal = () => {
    if (!clientFormData.startDate || !clientFormData.endDate || !clientFormData.carName) return 0;
    
    const car = cars.find(c => c.name === clientFormData.carName);
    if (!car) return 0;
    
    const start = new Date(clientFormData.startDate);
    const end = new Date(clientFormData.endDate);
    const days = Math.ceil((end - start) / (1000 * 60 * 60 * 24));
    const rentalDays = days === 0 ? 1 : days;
    return rentalDays * car.price;
  };

  const checkDateConflict = (startDate, endDate, carId, excludeBookingId = null) => {
  // Get the car name from carId
  const car = cars.find(c => c.id === carId);
  if (!car) return false;
  
  // Check conflicts in bookings/reservations
  const bookingConflict = bookings[carId] && bookings[carId].some(booking => {
    if (excludeBookingId && booking.id === excludeBookingId) return false;
    return (startDate <= booking.end && endDate >= booking.start);
  });
  
  // Check conflicts in client management
  const clientConflict = clients.some(client => {
    if (client.car_name === car.name) {
      return (startDate <= client.end_date && endDate >= client.start_date);
    }
    return false;
  });
  
  return bookingConflict || clientConflict;
};
  const isCarAvailable = (carId, startDate, endDate) => {
    if (!startDate || !endDate) return true;
    return !checkDateConflict(startDate, endDate, carId);
  };

  const getFilteredCars = () => {
  if (!showAvailableOnly || !filterDates.start || !filterDates.end) {
    return cars;
  }
  
  return cars.filter(car => {
    // Check both bookings and client conflicts
    const hasBookingConflict = bookings[car.id] && bookings[car.id].some(booking => {
      return (filterDates.start <= booking.end && filterDates.end >= booking.start);
    });
    
    const hasClientConflict = clients.some(client => {
      if (client.car_name === car.name) {
        return (filterDates.start <= client.end_date && filterDates.end >= client.start_date);
      }
      return false;
    });
    
    return !hasBookingConflict && !hasClientConflict;
  });
};
const getAllReservations = () => {
  const allReservations = [];
  const currentDate = new Date();
  
  // Only get actual bookings/reservations (not client records)
  Object.entries(bookings).forEach(([carId, carBookings]) => {
    carBookings.forEach(booking => {
      const startDate = new Date(booking.start);
      const daysUntilStart = Math.ceil((startDate - currentDate) / (1000 * 60 * 60 * 24));
      
      allReservations.push({
        ...booking,
        daysUntilStart,
        isUpcoming: daysUntilStart >= 0 && daysUntilStart <= 2
      });
    });
  });
  
  // Sort by start date (newest reservations first)
  return allReservations.sort((a, b) => new Date(b.start) - new Date(a.start));

};
const getUpcomingReservations = () => {
  return getAllReservations().filter(reservation => reservation.isUpcoming);
};
const getCarFreePeriods = () => {
  const today = new Date();
  const nextYear = new Date();
  nextYear.setFullYear(today.getFullYear() + 1);
  nextYear.setDate(today.getDate()); // Same day next year
  
  const freePeriods = {};

  cars.forEach(car => {
    freePeriods[car.id] = {
      carName: car.name,
      price: car.price,
      periods: []
    };

    const carBookings = [];
    
    // Get all bookings for this car within the date range
    clients.forEach(client => {
      if (client.car_name === car.name) {
        const clientStart = new Date(client.start_date);
        const clientEnd = new Date(client.end_date);
        
        // Only include bookings that fall within our date range
        if (clientEnd >= today && clientStart <= nextYear) {
          carBookings.push({
            start: client.start_date,
            end: client.end_date,
            source: 'client'
          });
        }
      }
    });
    
    if (bookings[car.id]) {
      bookings[car.id].forEach(booking => {
        const bookingStart = new Date(booking.start);
        const bookingEnd = new Date(booking.end);
        
        // Only include bookings that fall within our date range
        if (bookingEnd >= today && bookingStart <= nextYear) {
          carBookings.push({
            start: booking.start,
            end: booking.end,
            source: 'booking'
          });
        }
      });
    }

    // Sort bookings by start date
    carBookings.sort((a, b) => new Date(a.start) - new Date(b.start));

    let currentDate = new Date(today);
    
    carBookings.forEach(booking => {
      const bookingStart = new Date(booking.start);
      const bookingEnd = new Date(booking.end);
      
      // Adjust booking dates to fit within our range
      const effectiveBookingStart = bookingStart < today ? today : bookingStart;
      const effectiveBookingEnd = bookingEnd > nextYear ? nextYear : bookingEnd;
      
      // Check if there's a gap before this booking
      if (currentDate < effectiveBookingStart) {
        const gapEnd = new Date(effectiveBookingStart);
        gapEnd.setDate(gapEnd.getDate() - 1);
        
        if (currentDate <= gapEnd) {
          freePeriods[car.id].periods.push({
            start: new Date(currentDate),
            end: gapEnd,
            days: Math.ceil((gapEnd - currentDate) / (1000 * 60 * 60 * 24)) + 1
          });
        }
      }
      
      // Move current date to after this booking
      currentDate = new Date(effectiveBookingEnd);
      currentDate.setDate(currentDate.getDate() + 1);
    });

    // Check if there's availability from the last booking to next year
    if (currentDate <= nextYear) {
      freePeriods[car.id].periods.push({
        start: new Date(currentDate),
        end: nextYear,
        days: Math.ceil((nextYear - currentDate) / (1000 * 60 * 60 * 24)) + 1
      });
    }
  });

  return freePeriods;
};
// Statistics calculation functions with Profit & Loss Analysis
  const getCarStats2025 = () => {
    const year2025Start = new Date('2025-01-01');
    const year2025End = new Date('2025-12-31');
    const currentDate = new Date();
    const carStats = {};

    cars.forEach(car => {
      carStats[car.id] = {
        carName: car.name,
        totalDaysRented: 0,
        totalRevenue: 0,
        totalExpenses: 0,
        netProfit: 0,
        profitMargin: 0,
        monthlyData: Array.from({length: 12}, (_, i) => ({
          month: i + 1,
          monthName: new Date(2025, i, 1).toLocaleDateString('en-US', { month: 'long' }),
          days: 0,
          revenue: 0,
          expenses: 0,
          profit: 0
        }))
      };
// Process bookings data - only completed rentals
      if (bookings[car.id]) {
        bookings[car.id].forEach(booking => {
          const bookingStart = new Date(booking.start);
          const bookingEnd = new Date(booking.end);
          
          if (currentDate > bookingEnd && (bookingStart.getFullYear() === 2025 || bookingEnd.getFullYear() === 2025)) {
            const effectiveStart = bookingStart < year2025Start ? year2025Start : bookingStart;
            const effectiveEnd = bookingEnd > year2025End ? year2025End : bookingEnd;
            
            if (effectiveStart <= effectiveEnd) {
              const days = Math.ceil((effectiveEnd - effectiveStart) / (1000 * 60 * 60 * 24)) ;
              const revenue = booking.total || (days * car.price);
              
              carStats[car.id].totalDaysRented += days;
              carStats[car.id].totalRevenue += revenue;
              
              // Add to monthly data
              const startMonth = effectiveStart.getMonth();
              const endMonth = effectiveEnd.getMonth();
              
              if (startMonth === endMonth) {
                carStats[car.id].monthlyData[startMonth].days += days;
                carStats[car.id].monthlyData[startMonth].revenue += revenue;
              } else {
                for (let month = startMonth; month <= endMonth; month++) {
                  const monthStart = new Date(2025, month, 1);
                  const monthEnd = new Date(2025, month + 1, 0);
                  
                  const monthEffectiveStart = effectiveStart > monthStart ? effectiveStart : monthStart;
                  const monthEffectiveEnd = effectiveEnd < monthEnd ? effectiveEnd : monthEnd;
                  
                  if (monthEffectiveStart <= monthEffectiveEnd) {
                    const monthDays = Math.ceil((monthEffectiveEnd - monthEffectiveStart) / (1000 * 60 * 60 * 24));
                    const monthRevenue = monthDays * car.price;
                    
                    carStats[car.id].monthlyData[month].days += monthDays;
                    carStats[car.id].monthlyData[month].revenue += monthRevenue;
                  }
                }
              }
            }
          }
        });
      }

      // Process clients data - only completed rentals
      clients.forEach(client => {
        if (client.car_name === car.name) {
          const clientStart = new Date(client.start_date);
          const clientEnd = new Date(client.end_date);
          
          if (currentDate > clientEnd && (clientStart.getFullYear() === 2025 || clientEnd.getFullYear() === 2025)) {
            const effectiveStart = clientStart < year2025Start ? year2025Start : clientStart;
            const effectiveEnd = clientEnd > year2025End ? year2025End : clientEnd;
            
            if (effectiveStart <= effectiveEnd) {
              const days = Math.ceil((effectiveEnd - effectiveStart) / (1000 * 60 * 60 * 24)) ;
              const revenue = client.total_amount || (days * car.price);
              
              carStats[car.id].totalDaysRented += days;
              carStats[car.id].totalRevenue += revenue;
              
              const startMonth = effectiveStart.getMonth();
              const endMonth = effectiveEnd.getMonth();
              
              if (startMonth === endMonth) {
                carStats[car.id].monthlyData[startMonth].days += days;
                carStats[car.id].monthlyData[startMonth].revenue += revenue;
              } else {
                for (let month = startMonth; month <= endMonth; month++) {
                  const monthStart = new Date(2025, month, 1);
                  const monthEnd = new Date(2025, month + 1, 0);
                  
                  const monthEffectiveStart = effectiveStart > monthStart ? effectiveStart : monthStart;
                  const monthEffectiveEnd = effectiveEnd < monthEnd ? effectiveEnd : monthEnd;
                  
                  if (monthEffectiveStart <= monthEffectiveEnd) {
                    const monthDays = Math.ceil((monthEffectiveEnd - monthEffectiveStart) / (1000 * 60 * 60 * 24)) ;
                    const monthRevenue = monthDays * car.price;
                    
                    carStats[car.id].monthlyData[month].days += monthDays;
                    carStats[car.id].monthlyData[month].revenue += monthRevenue;
                  }
                }
              }
            }
          }
        }
      });
// Process expenses data from charges
      charges.forEach(charge => {
        if (charge.car_id && charge.car_id == car.id) {
          const chargeDate = new Date(charge.date);
          if (chargeDate.getFullYear() === 2025) {
            carStats[car.id].totalExpenses += charge.amount || 0;
            
            const chargeMonth = chargeDate.getMonth();
            carStats[car.id].monthlyData[chargeMonth].expenses += charge.amount || 0;
          }
        }
      });

      // Calculate net profit and margin
      carStats[car.id].netProfit = carStats[car.id].totalRevenue - carStats[car.id].totalExpenses;
      carStats[car.id].profitMargin = carStats[car.id].totalRevenue > 0 ? 
        Math.round((carStats[car.id].netProfit / carStats[car.id].totalRevenue) * 100) : 0;

      // Calculate monthly profits
      carStats[car.id].monthlyData.forEach(month => {
        month.profit = month.revenue - month.expenses;
      });
    });

    return carStats;
  };
// Comprehensive Excel Export Function - Add this to your component
const exportAllDataToExcel = async () => {
  try {
    // Ensure all data is loaded
    await ensureAllDataLoaded();
    
    if (clients.length === 0 && cars.length === 0 && getAllReservations().length === 0 && 
        charges.length === 0 && oilChanges.length === 0) {
      alert('No data to export');
      return;
    }

    // Calculate summary data
    const totalRevenue = clients.reduce((sum, client) => sum + (client.total_amount || 0), 0) +
                        getAllReservations().reduce((sum, res) => sum + (res.total || 0), 0);
    const totalExpenses = charges.reduce((sum, charge) => sum + (charge.amount || 0), 0);
    const totalOilChangeCosts = oilChanges.reduce((sum, oil) => sum + (oil.cost || 0), 0);

    let htmlContent = `
      <html>
        <head>
          <meta charset="UTF-8">
          <style>
            table { border-collapse: collapse; width: 100%; margin-bottom: 30px; }
            th, td { border: 1px solid #000; padding: 8px; text-align: left; }
            th { background-color: #f0f0f0; font-weight: bold; }
            .sheet-title { font-size: 18px; font-weight: bold; margin: 20px 0 10px 0; color: #1e3a8a; }
            .summary { background-color: #f9f9f9; padding: 15px; margin-bottom: 20px; border: 2px solid #1e3a8a; }
          </style>
        </head>
        <body>
          <h1>WEMBLEY CAR - Complete Business Report</h1>
          <p>Generated on: ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}</p>
          
          <div class="summary">
            <h2>Business Summary</h2>
            <p><strong>Total Cars:</strong> ${cars.length}</p>
            <p><strong>Total Clients:</strong> ${clients.length}</p>
            <p><strong>Total Reservations:</strong> ${getAllReservations().length}</p>
            <p><strong>Total Revenue:</strong> ${totalRevenue.toLocaleString()} DHS</p>
            <p><strong>Total Expenses:</strong> ${totalExpenses.toLocaleString()} DHS</p>
            <p><strong>Oil Change Costs:</strong> ${totalOilChangeCosts.toLocaleString()} DHS</p>
            <p><strong>Net Profit:</strong> ${(totalRevenue - totalExpenses - totalOilChangeCosts).toLocaleString()} DHS</p>
          </div>
    `;

    // 1. CLIENT MANAGEMENT
    if (clients.length > 0) {
      htmlContent += `
        <div class="sheet-title">CLIENT MANAGEMENT (${clients.length} clients)</div>
        <table>
          <thead>
            <tr>
              <th>Client Name</th>
              <th>Phone</th>
              <th>Car</th>
              <th>Start Date</th>
              <th>Start Time</th>
              <th>End Date</th>
              <th>End Time</th>
              <th>Total Amount (DHS)</th>
              <th>Advance Payment (DHS)</th>
              <th>Remaining Balance (DHS)</th>
              <th>Payment Status</th>
              <th>Current Status</th>
            </tr>
          </thead>
          <tbody>
      `;

      clients.forEach(client => {
        const currentDate = new Date();
        const endDate = new Date(client.end_date);
        const startDate = new Date(client.start_date);
        
        let status = '';
        if (currentDate < startDate) {
          status = 'PENDING';
        } else if (currentDate >= startDate && currentDate <= endDate) {
          status = 'ACTIVE';
        } else if (currentDate > endDate && client.full_payment) {
          status = 'COMPLETED';
        } else if (currentDate > endDate && !client.full_payment) {
          status = 'OVERDUE PAYMENT';
        }
        
        const paymentStatus = client.full_payment ? 'Paid Full' : 
                             client.advance_payment > 0 ? 'Partial Payment' : 'No Payment';
        const remainingBalance = (client.total_amount || 0) - (client.advance_payment || 0);
        
        htmlContent += `
          <tr>
            <td>${client.client_name || ''}</td>
            <td>${client.phone || 'N/A'}</td>
            <td>${client.car_name || ''}</td>
            <td>${formatDate(client.start_date)}</td>
            <td>${client.start_time || 'N/A'}</td>
            <td>${formatDate(client.end_date)}</td>
            <td>${client.end_time || 'N/A'}</td>
            <td>${client.total_amount || 0}</td>
            <td>${client.advance_payment || 0}</td>
            <td>${remainingBalance}</td>
            <td>${paymentStatus}</td>
            <td>${status}</td>
          </tr>
        `;
      });
      htmlContent += `</tbody></table>`;
    }

    // 2. CAR MANAGEMENT
    if (cars.length > 0) {
      htmlContent += `
        <div class="sheet-title">CAR MANAGEMENT (${cars.length} cars)</div>
        <table>
          <thead>
            <tr>
              <th>Car Name</th>
              <th>Plate Number</th>
              <th>Price per Day (DHS)</th>
              <th>Seats</th>
              <th>Fuel Type</th>
              <th>Current Status</th>
              <th>Active Bookings</th>
              <th>Total Revenue</th>
            </tr>
          </thead>
          <tbody>
      `;

      cars.forEach(car => {
        const hasBookings = bookings[car.id] && bookings[car.id].length > 0;
        const hasClients = clients.some(client => client.car_name === car.name);
        const carRevenue = clients.filter(c => c.car_name === car.name)
                                 .reduce((sum, c) => sum + (c.total_amount || 0), 0);
        
        htmlContent += `
          <tr>
            <td>${car.name}</td>
            <td>${car.plate_number}</td>
            <td>${car.price}</td>
            <td>${car.seats}</td>
            <td>${car.fuel}</td>
            <td>${hasBookings || hasClients ? 'In Use' : 'Available'}</td>
            <td>${(bookings[car.id] ? bookings[car.id].length : 0) + clients.filter(c => c.car_name === car.name).length}</td>
            <td>${carRevenue.toLocaleString()} DHS</td>
          </tr>
        `;
      });
      htmlContent += `</tbody></table>`;
    }

    // 3. RESERVATIONS
    const allReservations = getAllReservations();
    if (allReservations.length > 0) {
      htmlContent += `
        <div class="sheet-title">RESERVATIONS (${allReservations.length} reservations)</div>
        <table>
          <thead>
            <tr>
              <th>Car Name</th>
              <th>Customer Name</th>
              <th>Phone</th>
              <th>Email</th>
              <th>Start Date</th>
              <th>End Date</th>
              <th>Arrival Time</th>
              <th>Departure Time</th>
              <th>Total Amount (DHS)</th>
              <th>Remarks</th>
            </tr>
          </thead>
          <tbody>
      `;

      allReservations.forEach(reservation => {
        htmlContent += `
          <tr>
            <td>${reservation.carName}</td>
            <td>${reservation.customer.name}</td>
            <td>${reservation.customer.phone || 'N/A'}</td>
            <td>${reservation.customer.email || 'N/A'}</td>
            <td>${formatDate(reservation.start)}</td>
            <td>${formatDate(reservation.end)}</td>
            <td>${reservation.customer.arrivalTime || 'N/A'}</td>
            <td>${reservation.customer.departureTime || 'N/A'}</td>
            <td>${reservation.total || 0}</td>
            <td>${reservation.customer.remarks || 'N/A'}</td>
          </tr>
        `;
      });
      htmlContent += `</tbody></table>`;
    }

    // 4. CHARGES & EXPENSES
    if (charges.length > 0) {
      htmlContent += `
        <div class="sheet-title">CHARGES & EXPENSES (${charges.length} expenses)</div>
        <table>
          <thead>
            <tr>
              <th>Date</th>
              <th>Description</th>
              <th>Category</th>
              <th>Car</th>
              <th>Amount (DHS)</th>
              <th>Remarks</th>
            </tr>
          </thead>
          <tbody>
      `;

      charges.forEach(charge => {
        htmlContent += `
          <tr>
            <td>${formatDate(charge.date)}</td>
            <td>${charge.description}</td>
            <td>${charge.category}</td>
            <td>${charge.car_name || 'General'}</td>
            <td>${charge.amount}</td>
            <td>${charge.remarks || 'N/A'}</td>
          </tr>
        `;
      });
      htmlContent += `</tbody></table>`;
    }

    // 5. OIL CHANGES
    if (oilChanges.length > 0) {
      htmlContent += `
        <div class="sheet-title">OIL CHANGES (${oilChanges.length} records)</div>
        <table>
          <thead>
            <tr>
              <th>Car Name</th>
              <th>Plate Number</th>
              <th>Service Date</th>
              <th>Location</th>
              <th>Current KM</th>
              <th>Items Changed</th>
              <th>Cost (DHS)</th>
              <th>Next Service KM</th>
              <th>Status</th>
              <th>Remarks</th>
            </tr>
          </thead>
          <tbody>
      `;

      oilChanges.forEach(oil => {
        const statusInfo = getOilChangeStatus(oil);
        htmlContent += `
          <tr>
            <td>${oil.car_name}</td>
            <td>${oil.plate_number || 'N/A'}</td>
            <td>${formatDate(oil.date)}</td>
            <td>${oil.location || 'N/A'}</td>
            <td>${oil.current_km.toLocaleString()}</td>
            <td>${oil.items_changed || 'N/A'}</td>
            <td>${oil.cost || 'N/A'}</td>
            <td>${oil.next_service_km ? oil.next_service_km.toLocaleString() : 'N/A'}</td>
            <td>${statusInfo.status}</td>
            <td>${oil.remarks || 'N/A'}</td>
          </tr>
        `;
      });
      htmlContent += `</tbody></table>`;
    }

    htmlContent += `
        </body>
      </html>
    `;

    // Create and download the file
    const blob = new Blob([htmlContent], { 
      type: 'application/vnd.ms-excel' 
    });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    const fileName = `Wembley_Car_Complete_Report_${new Date().toISOString().split('T')[0]}.xls`;
    
    link.href = url;
    link.download = fileName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    const totalRecords = clients.length + cars.length + allReservations.length + charges.length + oilChanges.length;
    alert(`Successfully exported complete business report with ${totalRecords} total records to ${fileName}`);
    
  } catch (error) {
    console.error('Export error:', error);
    alert('Error exporting data. Please try again.');
  }
};
// Excel export function
  const exportClientsToExcel = () => {
    if (clients.length === 0) {
      alert('No clients to export');
      return;
    }

    let htmlContent = `
      <table border="1">
        <thead>
          <tr>
            <th>Client Name</th>
            <th>Phone</th>
            <th>Car</th>
            <th>Start Date</th>
            <th>Start Time</th>
            <th>End Date</th>
            <th>End Time</th>
            <th>Total Amount (DHS)</th>
            <th>Advance Payment (DHS)</th>
            <th>Remaining Balance (DHS)</th>
            <th>Payment Status</th>
            <th>Current Status</th>
          </tr>
        </thead>
        <tbody>
    `;

    clients.forEach(client => {
      const currentDate = new Date();
      const endDate = new Date(client.end_date);
      const startDate = new Date(client.start_date);
      
      let status = '';
      if (currentDate < startDate) {
        status = 'PENDING';
      } else if (currentDate >= startDate && currentDate <= endDate) {
        status = 'ACTIVE';
      } else if (currentDate > endDate && client.full_payment) {
        status = 'COMPLETED';
      } else if (currentDate > endDate && !client.full_payment) {
        status = 'OVERDUE PAYMENT';
      }
      
      const paymentStatus = client.full_payment ? 'Paid Full' : 
                           client.advance_payment > 0 ? 'Partial Payment' : 'No Payment';
      
      const remainingBalance = (client.total_amount || 0) - (client.advance_payment || 0);
      
      htmlContent += `
        <tr>
          <td>${client.client_name || ''}</td>
          <td>${client.phone || 'N/A'}</td>
          <td>${client.car_name || ''}</td>
          <td>${formatDate(client.start_date)}</td>
          <td>${client.start_time || 'N/A'}</td>
          <td>${formatDate(client.end_date)}</td>
          <td>${client.end_time || 'N/A'}</td>
          <td>${client.total_amount || 0}</td>
          <td>${client.advance_payment || 0}</td>
          <td>${remainingBalance}</td>
          <td>${paymentStatus}</td>
          <td>${status}</td>
        </tr>
      `;
    });

    htmlContent += `
        </tbody>
      </table>
    `;

    const blob = new Blob([htmlContent], { 
      type: 'application/vnd.ms-excel' 
    });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    const fileName = `Wembley_Car_Clients_${new Date().toISOString().split('T')[0]}.xls`;
    
    link.href = url;
    link.download = fileName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    alert(`Successfully exported ${clients.length} clients to ${fileName}`);
  };
// Filter and availability handlers
  const handleShowAvailable = () => {
    if (!filterDates.start || !filterDates.end) {
      alert('Please select both start and end dates to filter available cars');
      return;
    }
    setShowAvailableOnly(true);
  };

  const clearFilter = () => {
    setShowAvailableOnly(false);
    setFilterDates({ start: '', end: '' });
  };

  // Client form handlers
  const handleClientSubmit = async () => {
    if (!clientFormData.clientName || !clientFormData.carName || !clientFormData.startDate || !clientFormData.endDate) {
      alert('Please fill in all required fields');
      return;
    }

    const clientDataToSubmit = {
      ...clientFormData,
      startTime: clientFormData.startTime || null,
      endTime: clientFormData.endTime || null
    };

    if (editingClient) {
      const success = await updateClient(clientDataToSubmit);
      if (success) {
        alert('Client updated successfully!');
        await loadClients();
        setEditingClient(null);
      }
    } else {
      const success = await saveClient(clientDataToSubmit);
      if (success) {
        alert('Client added successfully!');
        await loadClients();
      }
    }
    
    setShowClientForm(false);
    setClientFormData({
      clientName: '', phone: '', carName: '', startDate: '', startTime: '', endDate: '', endTime: '',
      totalAmount: 0, advancePayment: 0, fullPayment: false
    });
  };

  const handleEditClient = (client) => {
    setClientFormData({
      clientName: client.client_name,
      phone: client.phone || '',
      carName: client.car_name,
      startDate: client.start_date,
      startTime: client.start_time || '',
      endDate: client.end_date,
      endTime: client.end_time || '',
      totalAmount: client.total_amount || 0,
      advancePayment: client.advance_payment || 0,
      fullPayment: client.full_payment || false
    });
    setEditingClient(client);
    setShowClientForm(true);
  };

  const handleDeleteClient = async (client) => {
    if (window.confirm(`Are you sure you want to delete ${client.client_name}?`)) {
      const success = await deleteClient(client.id);
      if (success) {
        alert('Client deleted successfully!');
        await loadClients();
      }
    }
  };

  // Charge form handlers
  const handleChargeSubmit = async () => {
    if (!chargeFormData.description || !chargeFormData.date || !chargeFormData.amount) {
      alert('Please fill in all required fields');
      return;
    }

    if (editingCharge) {
      const success = await updateCharge(chargeFormData);
      if (success) {
        alert('Charge updated successfully!');
        await loadCharges();
        setEditingCharge(null);
      }
    } else {
      const success = await saveCharge(chargeFormData);
      if (success) {
        alert('Charge added successfully!');
        await loadCharges();
      }
    }
    
    setShowChargeForm(false);
    setChargeFormData({
      description: '', date: '', amount: 0, carId: '', carName: '', remarks: '', category: 'maintenance'
    });
  };

  const handleEditCharge = (charge) => {
    setChargeFormData({
      description: charge.description,
      date: charge.date,
      amount: charge.amount,
      carId: charge.car_id || '',
      carName: charge.car_name || '',
      remarks: charge.remarks || '',
      category: charge.category
    });
    setEditingCharge(charge);
    setShowChargeForm(true);
  };

  const handleDeleteCharge = async (charge) => {
    if (window.confirm(`Are you sure you want to delete this charge: ${charge.description}?`)) {
      const success = await deleteCharge(charge.id);
      if (success) {
        alert('Charge deleted successfully!');
        await loadCharges();
      }
    }
  };
// Oil Change form handlers
const handleOilChangeSubmit = async () => {
  if (!oilChangeFormData.carId || !oilChangeFormData.date || !oilChangeFormData.currentKm) {
    alert('Please fill in all required fields (Car, Date, Current KM)');
    return;
  }

  if (editingOilChange) {
    const success = await updateOilChange(oilChangeFormData);
    if (success) {
      alert('Oil change updated successfully!');
      await loadOilChanges();
      setEditingOilChange(null);
    }
  } else {
    const success = await saveOilChange(oilChangeFormData);
    if (success) {
      alert('Oil change added successfully!');
      await loadOilChanges();
    }
  }
  
  setShowOilChangeForm(false);
  setOilChangeFormData({
    carId: '', carName: '', plateNumber: '', date: '', location: '', 
    currentKm: 0, itemsChanged: '', cost: 0, nextServiceKm: 0, remarks: ''
  });
};

const handleEditOilChange = (oilChange) => {
  setOilChangeFormData({
    carId: oilChange.car_id,
    carName: oilChange.car_name,
    plateNumber: oilChange.plate_number || '',
    date: oilChange.date,
    location: oilChange.location || '',
    currentKm: oilChange.current_km,
    itemsChanged: oilChange.items_changed || '',
    cost: oilChange.cost || 0,
    nextServiceKm: oilChange.next_service_km || 0,
    remarks: oilChange.remarks || ''
  });
  setEditingOilChange(oilChange);
  setShowOilChangeForm(true);
};

const handleDeleteOilChange = async (oilChange) => {
  if (window.confirm(`Are you sure you want to delete this oil change record for ${oilChange.car_name}?`)) {
    const success = await deleteOilChange(oilChange.id);
    if (success) {
      alert('Oil change deleted successfully!');
      await loadOilChanges();
    }
  }
};
// Car management handlers
  const handleAddCar = async () => {
    if (!carFormData.name || !carFormData.plate_number || carFormData.price <= 0) {
      alert('Please fill in all required fields');
      return;
    }

    const success = await saveCar({
  name: carFormData.name.toUpperCase(),
  plate_number: carFormData.plate_number,
  price: carFormData.price,
  seats: carFormData.seats,
  fuel: carFormData.fuel
});

    if (success) {
      alert('Car added successfully!');
      await loadCars();
      setShowCarForm(false);
      setCarFormData({
  name: '', plate_number: '', price: 0, seats: 5, fuel: 'Gasoline'
});
    }
  };

const handleEditCar = (car) => {
  setCarFormData({
    name: car.name || '',
    plate_number: car.plate_number || '',
    price: car.price || 0,
    seats: car.seats || 5,
    fuel: car.fuel || 'Gasoline'
  });
  setEditingCar(car);
  setShowCarForm(true);
};
  const handleUpdateCar = async () => {
// Add this debug code temporarily
  console.log('Car Form Data:', carFormData);
  console.log('Name:', carFormData.name, 'Type:', typeof carFormData.name);
  console.log('Plate:', carFormData.plate_number, 'Type:', typeof carFormData.plate_number);
  console.log('Price:', carFormData.price, 'Type:', typeof carFormData.price);
    if (!carFormData.name || !carFormData.plate_number || carFormData.price <= 0) {
  alert('Please fill in all required fields');
  return;
}
    const success = await updateCar({
  name: carFormData.name.toUpperCase(),
  plate_number: carFormData.plate_number,  // Fixed
  price: carFormData.price,
  seats: carFormData.seats,
  fuel: carFormData.fuel
}, editingCar.id);

    if (success) {
      alert('Car updated successfully!');
      await loadCars();
      setShowCarForm(false);
      setEditingCar(null);
      setCarFormData({
  name: '', plate_number: '', price: 0, seats: 5, fuel: 'Gasoline'
});
    }
  };

  const handleDeleteCar = async (carToDelete) => {
    const hasBookings = bookings[carToDelete.id] && bookings[carToDelete.id].length > 0;
    const hasClients = clients.some(client => client.car_name === carToDelete.name);

    if (hasBookings || hasClients) {
      alert(`Cannot delete ${carToDelete.name} because it has active bookings or client reservations.`);
      return;
    }

    if (window.confirm(`Are you sure you want to delete ${carToDelete.name}?`)) {
      const success = await deleteCar(carToDelete.id);
      if (success) {
        alert('Car deleted successfully!');
        await loadCars();
      }
    }
  };

// Booking form handlers
  const handleBooking = async () => {
    if (!selectedCar || !selectedDates.start || !selectedDates.end || !customerInfo.name) {
      alert('Please fill in all required fields');
      return;
    }

    const hasConflict = checkDateConflict(
      selectedDates.start, 
      selectedDates.end, 
      selectedCar.id, 
      editingReservation ? editingReservation.id : null
    );

    if (hasConflict) {
      alert('These dates conflict with an existing reservation. Please choose different dates.');
      return;
    }

    if (editingReservation) {
      const updatedBooking = {
        ...editingReservation,
        start: selectedDates.start,
        end: selectedDates.end,
        customer: customerInfo,
        total: calculateTotal(),
        carName: selectedCar.name,
        carType: selectedCar.type
      };

      const success = await updateBooking(updatedBooking);
      if (success) {
        alert('Reservation updated successfully!');
        await loadBookings();
        setEditingReservation(null);
      }
    } else {
      const newBooking = {
        carId: selectedCar.id,
        start: selectedDates.start,
        end: selectedDates.end,
        customer: customerInfo,
        total: calculateTotal(),
        carName: selectedCar.name,
        carType: selectedCar.type
      };

      const success = await saveBooking(newBooking);
      if (success) {
        alert('Booking confirmed successfully!');
        await loadBookings();
      }
    }
    
    setShowBookingForm(false);
    setShowReservations(false);
    setShowStats(false);
    setSelectedCar(null);
    setSelectedDates({ start: '', end: '' });
    setCustomerInfo({ name: '', email: '', phone: '', arrivalTime: '', departureTime: '', remarks: '' });
  };

  const handleEditReservation = (reservation) => {
    const car = cars.find(c => c.id === reservation.carId);
    setSelectedCar(car);
    setSelectedDates({ start: reservation.start, end: reservation.end });
    setCustomerInfo(reservation.customer);
    setEditingReservation(reservation);
    setShowBookingForm(true);
    setShowReservations(false);
    setShowStats(false);
  };

  const handleDeleteReservation = async (reservationToDelete) => {
    if (window.confirm('Are you sure you want to delete this reservation?')) {
      const success = await deleteBookingFromDB(reservationToDelete.id);
      if (success) {
        alert('Reservation deleted successfully!');
        await loadBookings();
      }
    }
  };
// useEffect hooks
  useEffect(() => {
  const loadInitialData = async () => {
    setLoading(true);
    try {
      await Promise.all([
        loadCars(),
        loadBookings()
      ]);
    } finally {
      setLoading(false);
    }
  };
  
  loadInitialData();
}, []);

useEffect(() => {
  if (showStats) {
    ensureAllDataLoaded();
  }
}, [showStats]);

useEffect(() => {
  if (showClients && !dataLoaded.clients) {
    loadClients();
  }
}, [showClients]);

useEffect(() => {
  if (showCharges && !dataLoaded.charges) {
    loadCharges();
  }
}, [showCharges]);

useEffect(() => {
  if (showCarManagement && !dataLoaded.cars) {
    loadCars();
  }
}, [showCarManagement]);
  useEffect(() => {
    if (clientFormData.startDate && clientFormData.endDate && clientFormData.carName && clientFormData.totalAmount === 0) {
      const suggested = calculateSuggestedTotal();
      setClientFormData(prev => ({...prev, totalAmount: suggested}));
    }
  }, [clientFormData.startDate, clientFormData.endDate, clientFormData.carName]);

return (
    <div style={{ minHeight: '100vh', backgroundColor: '#f5f5f5', fontFamily: 'Arial, sans-serif' }}>
      
      {loading && (
        <div style={{
          position: 'fixed', top: 0, left: 0, width: '100%', height: '100%',
          backgroundColor: 'rgba(0,0,0,0.5)', display: 'flex', justifyContent: 'center',
          alignItems: 'center', zIndex: 1000
        }}>
          <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '10px', textAlign: 'center' }}>
            <div style={{ fontSize: '24px', marginBottom: '10px' }}>⏳</div>
            <div>Loading...</div>
          </div>
        </div>
      )}
{/* Available Periods View */}
{showFreePeriods && (
  <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '10px', marginBottom: '20px' }}>
    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
      <h2 style={{ margin: 0, color: '#1e3a8a' }}>🗓️ Available Periods</h2>
      <div style={{ display: 'flex', gap: '10px' }}>
        <button
          onClick={() => {
            setShowReservations(true);
            setShowFreePeriods(false);
            setShowOilChanges(false); setShowOilChangeForm(false);
          }}
          style={{
            backgroundColor: '#059669', color: 'white', border: 'none', padding: '10px 20px',
            borderRadius: '5px', cursor: 'pointer', fontSize: '14px'
          }}
        >
          📋 Back to Reservations
        </button>
        <button
          onClick={() => setShowFreePeriods(false)}
          style={{
            backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '8px 16px',
            borderRadius: '5px', cursor: 'pointer'
          }}
        >
          ✕ Close
        </button>
      </div>
    </div>

    {(() => {
      const freePeriods = getCarFreePeriods();
      const hasAvailablePeriods = Object.values(freePeriods).some(car => car.periods.length > 0);

      if (!hasAvailablePeriods) {
        return (
          <div style={{ textAlign: 'center', padding: '40px', color: '#6b7280' }}>
            <div style={{ fontSize: '48px', marginBottom: '10px' }}>📅</div>
            <p>All cars are currently booked. No available periods found.</p>
            <p style={{ fontSize: '14px', marginTop: '10px' }}>
              Check back later or add more cars to your fleet.
            </p>
          </div>
        );
      }

      return (
        <div style={{ display: 'grid', gap: '20px' }}>
          {Object.entries(freePeriods).map(([carId, carData]) => {
            if (carData.periods.length === 0) return null;

            return (
              <div key={carId} style={{
                border: '1px solid #e5e7eb', borderRadius: '10px', padding: '20px',
                backgroundColor: '#f9fafb'
              }}>
                <div style={{ 
                  display: 'flex', justifyContent: 'space-between', alignItems: 'center', 
                  marginBottom: '15px', paddingBottom: '10px', borderBottom: '2px solid #e5e7eb' 
                }}>
                  <h3 style={{ margin: 0, color: '#1e3a8a', fontSize: '18px', fontWeight: 'bold' }}>
                    {carData.carName}
                  </h3>
                  <div style={{
                    backgroundColor: '#dcfce7', color: '#166534', padding: '5px 12px',
                    borderRadius: '15px', fontSize: '12px', fontWeight: 'bold'
                  }}>
                    {carData.price} DHS/day
                  </div>
                </div>

                <div style={{ display: 'grid', gap: '10px' }}>
                  {carData.periods.map((period, index) => {
                    const startDate = new Date(period.start);
                    const endDate = new Date(period.end);
                    const isCurrentPeriod = startDate <= new Date() && endDate >= new Date();
                    const potentialRevenue = period.days * carData.price;

                    return (
                      <div key={index} style={{
                        display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', 
                        gap: '15px', padding: '15px',
                        backgroundColor: isCurrentPeriod ? '#f0f9ff' : '#ffffff',
                        border: isCurrentPeriod ? '2px solid #0ea5e9' : '1px solid #e5e7eb',
                        borderRadius: '8px'
                      }}>
                        <div>
                          <div style={{ fontWeight: 'bold', color: '#374151', marginBottom: '5px' }}>
                            📅 Period
                          </div>
                          <div style={{ fontSize: '14px', color: '#6b7280' }}>
                            {startDate.toLocaleDateString()} - {endDate.toLocaleDateString()}
                          </div>
                          {isCurrentPeriod && (
                            <div style={{
                              fontSize: '11px', color: '#0369a1', fontWeight: 'bold',
                              marginTop: '3px'
                            }}>
                              📍 Available Now
                            </div>
                          )}
                        </div>

                        <div>
                          <div style={{ fontWeight: 'bold', color: '#374151', marginBottom: '5px' }}>
                            ⏱️ Duration
                          </div>
                          <div style={{ fontSize: '14px', color: '#6b7280' }}>
                            {period.days} day{period.days !== 1 ? 's' : ''}
                          </div>
                        </div>

                        <div>
                          <div style={{ fontWeight: 'bold', color: '#374151', marginBottom: '5px' }}>
                            💰 Potential Revenue
                          </div>
                          <div style={{ fontSize: '14px', color: '#059669', fontWeight: 'bold' }}>
                            {potentialRevenue.toLocaleString()} DHS
                          </div>
                        </div>

                        <div style={{ display: 'flex', alignItems: 'center' }}>
                          <button
                            onClick={() => {
                              const car = cars.find(c => c.id == carId);
                              if (car) {
                                setSelectedCar(car);
                                setSelectedDates({
                                  start: startDate.toISOString().split('T')[0],
                                  end: endDate.toISOString().split('T')[0]
                                });
                                setShowBookingForm(true);
                                setShowFreePeriods(false);
                              }
                            }}
                            style={{
                              backgroundColor: '#1e3a8a', color: 'white', border: 'none',
                              padding: '8px 16px', borderRadius: '5px', cursor: 'pointer',
                              fontSize: '12px', fontWeight: 'bold'
                            }}
                          >
                            📅 Book This Period
                          </button>
                        </div>
                      </div>
                    );
                  })}
                </div>

                <div style={{
                  marginTop: '15px', padding: '10px', backgroundColor: '#f0f9ff',
                  borderRadius: '6px', fontSize: '12px', color: '#0369a1'
                }}>
                  💡 Total available: {carData.periods.reduce((sum, p) => sum + p.days, 0)} days 
                  • Potential revenue: {carData.periods.reduce((sum, p) => sum + (p.days * carData.price), 0).toLocaleString()} DHS
                </div>
              </div>
            );
          })}
        </div>
      );
    })()}
  </div>
)}
      {/* Header */}
<div style={{ backgroundColor: '#1e3a8a', color: 'white', padding: '20px' }}>
  <div style={{ 
    maxWidth: '1200px', margin: '0 auto', display: 'flex', 
    justifyContent: 'space-between', alignItems: 'center', flexWrap: 'wrap', gap: '15px' 
  }}>
    <h1 style={{ 
      margin: 0, fontSize: '32px', fontWeight: 'bold', letterSpacing: '2px',
      textShadow: '2px 2px 4px rgba(0,0,0,0.3)', fontFamily: '"Trebuchet MS", Arial, sans-serif'
    }}>
      🚗 WEMBLEY CAR
    </h1>
    
    {/* Stats and Alerts Row */}
    <div style={{ display: 'flex', alignItems: 'center', gap: '12px', flexWrap: 'wrap' }}>
      <span style={{ 
        backgroundColor: 'rgba(255,255,255,0.2)', padding: '8px 16px', borderRadius: '20px', 
        fontSize: '14px', backdropFilter: 'blur(10px)', border: '1px solid rgba(255,255,255,0.3)'
      }}>
        {cars.length} Cars Available
      </span>
      
      {/* Upcoming Reservations Alert */}
      {(() => {
        const upcoming = getUpcomingReservations();
        if (upcoming.length > 0) {
          return (
            <div style={{ 
              backgroundColor: '#fef3c7', color: '#92400e', padding: '6px 12px', 
              borderRadius: '15px', fontSize: '12px', fontWeight: 'bold',
              border: '1px solid #f59e0b', animation: 'pulse 2s infinite'
            }}>
              🚨 {upcoming.length} booking(s) in next 2 days
            </div>
          );
        }
        return null;
      })()}
    </div>

    {/* Navigation Buttons - Modern Grid Layout */}
    <div style={{ 
      display: 'grid', 
      gridTemplateColumns: 'repeat(auto-fit, minmax(140px, 1fr))', 
      gap: '12px', 
      width: '100%', 
      marginTop: '20px',
      maxWidth: '1000px'
    }}>
      
      {/* Management Section */}
      <div style={{ 
        backgroundColor: 'rgba(255,255,255,0.1)', 
        borderRadius: '15px', 
        padding: '15px',
        backdropFilter: 'blur(10px)',
        border: '1px solid rgba(255,255,255,0.2)'
      }}>
        <h3 style={{ 
          margin: '0 0 12px 0', 
          fontSize: '14px', 
          color: 'rgba(255,255,255,0.8)',
          textAlign: 'center',
          fontWeight: '600'
        }}>
          📋 Management
        </h3>
        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
          <button
            onClick={() => {
              setShowReservations(!showReservations);
              setShowClients(false); setShowClientForm(false); setShowFreePeriods(false);
              setShowStats(false); setShowCharges(false); setShowCarManagement(false);
              setShowDocuments(false); setShowDocumentForm(false);
              setShowOilChanges(false); setShowOilChangeForm(false);
            }}
            style={{
              backgroundColor: showReservations ? '#10b981' : 'rgba(16, 185, 129, 0.8)',
              color: 'white', border: 'none', padding: '8px 12px',
              borderRadius: '8px', cursor: 'pointer', fontSize: '13px',
              fontWeight: '500', transition: 'all 0.3s ease',
              boxShadow: showReservations ? '0 4px 12px rgba(16, 185, 129, 0.4)' : 'none'
            }}
          >
            📋 Reservations ({getAllReservations().length})
          </button>
          
          <button
            onClick={() => {
              setShowClients(!showClients);
              setShowReservations(false); setShowClientForm(false); setShowFreePeriods(false);
              setShowStats(false); setShowCharges(false); setShowCarManagement(false);
              setShowDocuments(false); setShowDocumentForm(false);
              setShowOilChanges(false); setShowOilChangeForm(false);
            }}
            style={{
              backgroundColor: showClients ? '#7c3aed' : 'rgba(124, 58, 237, 0.8)',
              color: 'white', border: 'none', padding: '8px 12px',
              borderRadius: '8px', cursor: 'pointer', fontSize: '13px',
              fontWeight: '500', transition: 'all 0.3s ease',
              boxShadow: showClients ? '0 4px 12px rgba(124, 58, 237, 0.4)' : 'none'
            }}
          >
            👥 Clients
          </button>

          <button
            onClick={() => {
              setShowCarManagement(!showCarManagement);
              setShowReservations(false); setShowClients(false); setShowClientForm(false);
              setShowFreePeriods(false); setShowStats(false); setShowCharges(false);
              setShowDocuments(false); setShowDocumentForm(false);
              setShowOilChanges(false); setShowOilChangeForm(false);
            }}
            style={{
              backgroundColor: showCarManagement ? '#8b5cf6' : 'rgba(139, 92, 246, 0.8)',
              color: 'white', border: 'none', padding: '8px 12px',
              borderRadius: '8px', cursor: 'pointer', fontSize: '13px',
              fontWeight: '500', transition: 'all 0.3s ease',
              boxShadow: showCarManagement ? '0 4px 12px rgba(139, 92, 246, 0.4)' : 'none'
            }}
          >
            🚗 Fleet
          </button>
        </div>
      </div>

      {/* Financial Section */}
      <div style={{ 
        backgroundColor: 'rgba(255,255,255,0.1)', 
        borderRadius: '15px', 
        padding: '15px',
        backdropFilter: 'blur(10px)',
        border: '1px solid rgba(255,255,255,0.2)'
      }}>
        <h3 style={{ 
          margin: '0 0 12px 0', 
          fontSize: '14px', 
          color: 'rgba(255,255,255,0.8)',
          textAlign: 'center',
          fontWeight: '600'
        }}>
          💰 Financial
        </h3>
        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
          <button
            onClick={() => {
              setShowStats(true);
              setShowReservations(false); setShowClients(false); setShowClientForm(false);
              setShowFreePeriods(false); setShowCharges(false); setShowChargeForm(false);
              setShowCarManagement(false); setShowCarForm(false); setShowBookingForm(false);
              setShowDocuments(false); setShowDocumentForm(false);
              setShowOilChanges(false); setShowOilChangeForm(false);
            }}
            style={{
              backgroundColor: showStats ? '#f59e0b' : 'rgba(245, 158, 11, 0.8)',
              color: 'white', border: 'none', padding: '8px 12px',
              borderRadius: '8px', cursor: 'pointer', fontSize: '13px',
              fontWeight: '500', transition: 'all 0.3s ease',
              boxShadow: showStats ? '0 4px 12px rgba(245, 158, 11, 0.4)' : 'none'
            }}
          >
            📊 Analytics
          </button>

          <button
            onClick={() => {
              setShowCharges(true);
              setShowReservations(false); setShowClients(false); setShowClientForm(false);
              setShowFreePeriods(false); setShowStats(false); setShowCarManagement(false);
              setShowDocuments(false); setShowDocumentForm(false);
              setShowOilChanges(false); setShowOilChangeForm(false);
            }}
            style={{
              backgroundColor: showCharges ? '#dc2626' : 'rgba(220, 38, 38, 0.8)',
              color: 'white', border: 'none', padding: '8px 12px',
              borderRadius: '8px', cursor: 'pointer', fontSize: '13px',
              fontWeight: '500', transition: 'all 0.3s ease',
              boxShadow: showCharges ? '0 4px 12px rgba(220, 38, 38, 0.4)' : 'none'
            }}
          >
            💳 Expenses
          </button>

          <button
            onClick={async () => {
              await ensureAllDataLoaded();
              exportAllDataToExcel();
            }}
            style={{
              backgroundColor: 'rgba(5, 150, 105, 0.9)',
              color: 'white', border: 'none', padding: '8px 12px',
              borderRadius: '8px', cursor: 'pointer', fontSize: '13px',
              fontWeight: '500', transition: 'all 0.3s ease',
              background: 'linear-gradient(45deg, #059669, #10b981)'
            }}
          >
            📊 Export Report
          </button>
        </div>
      </div>

      {/* Documents & Maintenance Section */}
      <div style={{ 
        backgroundColor: 'rgba(255,255,255,0.1)', 
        borderRadius: '15px', 
        padding: '15px',
        backdropFilter: 'blur(10px)',
        border: '1px solid rgba(255,255,255,0.2)'
      }}>
        <h3 style={{ 
          margin: '0 0 12px 0', 
          fontSize: '14px', 
          color: 'rgba(255,255,255,0.8)',
          textAlign: 'center',
          fontWeight: '600'
        }}>
          📄 Operations
        </h3>
        <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
          <button
            onClick={async () => {
              setShowDocuments(!showDocuments);
              setShowReservations(false); setShowClients(false); setShowClientForm(false);
              setShowFreePeriods(false); setShowStats(false); setShowCharges(false);
              setShowCarManagement(false); setShowCarForm(false); setShowBookingForm(false);
              setShowChargeForm(false);
              setShowOilChanges(false); setShowOilChangeForm(false);
              
              if (!showDocuments) {
                await loadDocuments();
              }
            }}
            style={{
              backgroundColor: showDocuments ? '#059669' : 'rgba(5, 150, 105, 0.8)',
              color: 'white', border: 'none', padding: '8px 12px',
              borderRadius: '8px', cursor: 'pointer', fontSize: '13px',
              fontWeight: '500', transition: 'all 0.3s ease',
              boxShadow: showDocuments ? '0 4px 12px rgba(5, 150, 105, 0.4)' : 'none'
            }}
          >
            📄 Documents
          </button>

          <button
            onClick={async () => {
              setShowOilChanges(!showOilChanges);
              setShowReservations(false); setShowClients(false); setShowClientForm(false);
              setShowFreePeriods(false); setShowStats(false); setShowCharges(false);
              setShowCarManagement(false); setShowCarForm(false); setShowBookingForm(false);
              setShowChargeForm(false); setShowDocuments(false); setShowDocumentForm(false);
              
              if (!showOilChanges) {
                await loadOilChanges();
              }
            }}
            style={{
              backgroundColor: showOilChanges ? '#16a34a' : 'rgba(22, 163, 74, 0.8)',
              color: 'white', border: 'none', padding: '8px 12px',
              borderRadius: '8px', cursor: 'pointer', fontSize: '13px',
              fontWeight: '500', transition: 'all 0.3s ease',
              boxShadow: showOilChanges ? '0 4px 12px rgba(22, 163, 74, 0.4)' : 'none'
            }}
          >
            🔧 Maintenance
          </button>

          <button
            onClick={async () => {
              setDataLoaded({
                cars: false,
                bookings: false,
                clients: false,
                charges: false,
                documents: false,
                oilChanges: false
              });
              
              setLoading(true);
              try {
                await Promise.all([
                  loadCars(),
                  loadBookings(),
                  loadClients(),
                  loadCharges(),
                  loadDocuments(),
                  loadOilChanges()
                ]);
              } finally {
                setLoading(false);
              }
            }}
            style={{
              backgroundColor: 'rgba(139, 92, 246, 0.8)',
              color: 'white', border: 'none', padding: '8px 12px',
              borderRadius: '8px', cursor: 'pointer', fontSize: '13px',
              fontWeight: '500', transition: 'all 0.3s ease'
            }}
          >
            🔄 Refresh
          </button>
        </div>
      </div>
    </div>
  </div>
</div>
      <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '20px' }}>
{/* Car Management */}
        {showCarManagement && !showCarForm && (
          <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '10px', marginBottom: '20px' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
              <h2 style={{ margin: 0, color: '#1e3a8a' }}>🚗 Car Management ({cars.length})</h2>
              <div style={{ display: 'flex', gap: '10px' }}>
                <button
                  onClick={() => setShowCarForm(true)}
                  style={{
                    backgroundColor: '#10b981', color: 'white', border: 'none', padding: '10px 20px',
                    borderRadius: '5px', cursor: 'pointer', fontSize: '14px'
                  }}
                >
                  ➕ Add New Car
                </button>
                <button
                  onClick={() => setShowCarManagement(false)}
                  style={{
                    backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '8px 16px',
                    borderRadius: '5px', cursor: 'pointer'
                  }}
                >
                  ✕ Close
                </button>
              </div>
            </div>

            <div style={{ overflowX: 'auto' }}>
              <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '14px' }}>
                <thead>
                  <tr style={{ backgroundColor: '#f3f4f6' }}>
                    <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Car Name</th>
                    <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Plate Number</th>
                    <th style={{ padding: '12px', textAlign: 'right', border: '1px solid #d1d5db' }}>Price/Day</th>
                    <th style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>Seats</th>
                    <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Fuel</th>
                    <th style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>Status</th>
                    <th style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {cars.map((car, index) => {
  const hasBookings = bookings[car.id] && bookings[car.id].length > 0;
  const hasClients = clients.some(client => client.car_name === car.name);
  const today = new Date().toISOString().split('T')[0];

  // Check if currently rented
  const isCurrentlyRented = clients.some(client => {
    if (client.car_name === car.name) {
      return today >= client.start_date && today <= client.end_date;
    }
    return false;
  }) || (bookings[car.id] && bookings[car.id].some(booking => {
    return today >= booking.start && today <= booking.end;
  }));

  const canDelete = !hasBookings && !hasClients;

  return (
    <tr key={car.id} style={{ backgroundColor: index % 2 === 0 ? '#ffffff' : '#f9fafb' }}>                        <td style={{ padding: '12px', border: '1px solid #d1d5db', fontWeight: 'bold' }}>
                          {car.name}
                        </td>
                        <td style={{ padding: '12px', border: '1px solid #d1d5db' }}>
  {car.plate_number}
</td>
                        <td style={{ padding: '12px', textAlign: 'right', border: '1px solid #d1d5db', color: '#059669', fontWeight: 'bold' }}>
                          {car.price} DHS
                        </td>
                        <td style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>
                          {car.seats}
                        </td>
                        <td style={{ padding: '12px', border: '1px solid #d1d5db' }}>
                          {car.fuel}
                        </td>
                        <td style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>
  <span style={{
    backgroundColor: isCurrentlyRented ? '#fee2e2' : canDelete ? '#dcfce7' : '#fef3c7',
    color: isCurrentlyRented ? '#dc2626' : canDelete ? '#166534' : '#92400e',
    padding: '4px 8px',
    borderRadius: '12px',
    fontSize: '12px',
    fontWeight: 'bold'
  }}>
    {isCurrentlyRented ? 'Currently Rented' : canDelete ? 'Available' : 'Has Bookings'}
  </span>
</td>
                        <td style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>
                          <div style={{ display: 'flex', gap: '5px', justifyContent: 'center' }}>
                            <button
                              onClick={() => handleEditCar(car)}
                              style={{
                                backgroundColor: '#3b82f6', color: 'white', border: 'none', padding: '5px 10px',
                                borderRadius: '3px', cursor: 'pointer', fontSize: '12px'
                              }}
                            >
                              ✏️ Edit
                            </button>
                            <button
                              onClick={() => handleDeleteCar(car)}
                              disabled={!canDelete}
                              style={{
                                backgroundColor: canDelete ? '#ef4444' : '#9ca3af', 
                                color: 'white', border: 'none', padding: '5px 10px',
                                borderRadius: '3px', cursor: canDelete ? 'pointer' : 'not-allowed', 
                                fontSize: '12px', opacity: canDelete ? 1 : 0.5
                              }}
                              title={!canDelete ? 'Cannot delete car with active bookings' : ''}
                            >
                              🗑️ Delete
                            </button>
                          </div>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          </div>
        )}
{/* Car Form */}
        {showCarForm && (
          <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '10px', marginBottom: '20px' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
              <h2 style={{ margin: 0, color: '#1e3a8a' }}>
                {editingCar ? '✏️ Edit Car' : '🚗 Add New Car'}
              </h2>
              <button
                onClick={() => {
                  setShowCarForm(false);
                  setEditingCar(null);
                setCarFormData({
  name: '', plate_number: '', price: 0, seats: 5, fuel: 'Gasoline'
});
                }}
                style={{
                  backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '8px 16px',
                  borderRadius: '5px', cursor: 'pointer'
                }}
              >
                ✕ Cancel
              </button>
            </div>

            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '15px' }}>
              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Car Name *
                </label>
                <input
                  type="text"
                  value={carFormData.name}
                  onChange={(e) => setCarFormData(prev => ({...prev, name: e.target.value}))}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px'
                  }}
                  placeholder="e.g., TOYOTA CAMRY BLANCHE"
                />
              </div>

            <div>
  <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
    Plate Number *
  </label>
  <input
    type="text"
    value={carFormData.plate_number}
    onChange={(e) => setCarFormData(prev => ({...prev, plate_number: e.target.value.toUpperCase()}))}
    style={{
      width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
      fontSize: '14px'
    }}
    placeholder="e.g., 123456-A-01"
  />
</div>
              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Price per Day (DHS) *
                </label>
                <input
                  type="number"
                  value={carFormData.price}
                  onChange={(e) => setCarFormData(prev => ({...prev, price: parseFloat(e.target.value) || 0}))}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px'
                  }}
                  placeholder="250"
                  min="0"
                />
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Seats
                </label>
                <select
                  value={carFormData.seats}
                  onChange={(e) => setCarFormData(prev => ({...prev, seats: parseInt(e.target.value)}))}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px'
                  }}
                >
                  <option value="2">2 Seats</option>
                  <option value="4">4 Seats</option>
                  <option value="5">5 Seats</option>
                  <option value="7">7 Seats</option>
                  <option value="9">9 Seats</option>
                </select>
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Fuel Type
                </label>
                <select
                  value={carFormData.fuel}
                  onChange={(e) => setCarFormData(prev => ({...prev, fuel: e.target.value}))}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px'
                  }}
                >
                  <option value="Gasoline">Gasoline</option>
                  <option value="Diesel">Diesel</option>
                  <option value="Electric">Electric</option>
                  <option value="Hybrid">Hybrid</option>
                </select>
              </div>
            </div>

            <div style={{ marginTop: '20px', textAlign: 'center' }}>
              <button
                onClick={editingCar ? handleUpdateCar : handleAddCar}
                style={{
                  backgroundColor: '#10b981', color: 'white', border: 'none', padding: '12px 30px',
                  borderRadius: '5px', cursor: 'pointer', fontSize: '16px',
                  fontWeight: 'bold'
                }}
              >
                {editingCar ? '✏️ Update Car' : '🚗 Add Car'}
              </button>
            </div>
          </div>
        )}
{/* Reservations View */}
{showReservations && (
  <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '10px', marginBottom: '20px' }}>
    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
      <h2 style={{ margin: 0, color: '#1e3a8a' }}>📋 All Reservations ({getAllReservations().length})</h2>
      <div style={{ display: 'flex', gap: '10px' }}>
        <button
          onClick={() => {
            setShowFreePeriods(!showFreePeriods);
            setShowReservations(false);
          }}
          style={{
            backgroundColor: '#059669', color: 'white', border: 'none', padding: '10px 20px',
            borderRadius: '5px', cursor: 'pointer', fontSize: '14px'
          }}
        >
          🗓️ Available Periods
        </button>
        <button
          onClick={() => setShowReservations(false)}
          style={{
            backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '8px 16px',
            borderRadius: '5px', cursor: 'pointer'
          }}
        >
          ✕ Close
        </button>
      </div>
    </div>

    {/* Alert Section for Upcoming Reservations */}
    {(() => {
      const upcoming = getUpcomingReservations();
      
      if (upcoming.length > 0) {
        return (
          <div style={{ marginBottom: '20px' }}>
            <div style={{ backgroundColor: '#fef3c7', border: '1px solid #f59e0b', borderRadius: '8px', padding: '15px' }}>
              <h4 style={{ color: '#d97706', margin: '0 0 10px 0' }}>
                🚨 UPCOMING RESERVATIONS - NEXT 2 DAYS ({upcoming.length})
              </h4>
              {upcoming.map(reservation => (
                <div key={reservation.id} style={{ fontSize: '14px', color: '#92400e', marginBottom: '8px', padding: '8px', backgroundColor: '#fffbeb', borderRadius: '4px' }}>
                  <strong>{reservation.carName}</strong> - {reservation.customer.name}
                  <br />
                  📅 {formatDate(reservation.start)} 
                  {reservation.daysUntilStart === 0 && <span style={{ color: '#dc2626', fontWeight: 'bold' }}> (TODAY!)</span>}
                  {reservation.daysUntilStart === 1 && <span style={{ color: '#d97706', fontWeight: 'bold' }}> (TOMORROW)</span>}
                  {reservation.daysUntilStart === 2 && <span style={{ color: '#059669', fontWeight: 'bold' }}> (In 2 days)</span>}
                  <br />
                  📞 {reservation.customer.phone || 'No phone'} 
                  {reservation.customer.arrivalTime && ` • ⏰ ${reservation.customer.arrivalTime}`}
                </div>
              ))}
            </div>
          </div>
        );
      }
      return null;
    })()}

    {getAllReservations().length === 0 ? (
      <div style={{ textAlign: 'center', padding: '40px', color: '#6b7280' }}>
        <div style={{ fontSize: '48px', marginBottom: '10px' }}>📋</div>
        <p>No reservations found. Start by booking a car!</p>
      </div>
    ) : (
      <div style={{ display: 'grid', gap: '15px' }}>
        {getAllReservations().map(reservation => {
          const isToday = reservation.daysUntilStart === 0;
          const isTomorrow = reservation.daysUntilStart === 1;
          const isUpcoming = reservation.isUpcoming;
          
          return (
            <div key={reservation.id} style={{
              border: isUpcoming ? '2px solid #f59e0b' : '1px solid #e5e7eb', 
              borderRadius: '8px', 
              padding: '15px',
              backgroundColor: isToday ? '#fef3c7' : isTomorrow ? '#fef7ff' : '#f9fafb'
            }}>
              <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '10px' }}>
                <div>
                  <strong style={{ color: '#1e3a8a' }}>{reservation.carName}</strong>
                  {isUpcoming && (
                    <div style={{ fontSize: '11px', color: '#d97706', fontWeight: 'bold', marginTop: '2px' }}>
                      {isToday ? '⚠️ TODAY' : isTomorrow ? '⚠️ TOMORROW' : '⚠️ SOON'}
                    </div>
                  )}
                </div>
                <div>
                  <strong>Customer:</strong> {reservation.customer.name}
                  <div style={{ fontSize: '12px', color: '#6b7280' }}>
                    {reservation.customer.phone} • {reservation.customer.email}
                  </div>
                </div>
                <div>
                  <strong>Period:</strong> {formatDate(reservation.start)} - {formatDate(reservation.end)}
                  <div style={{ fontSize: '12px', color: '#6b7280' }}>
                    {reservation.customer.arrivalTime} - {reservation.customer.departureTime}
                  </div>
                  {reservation.daysUntilStart >= 0 && (
                    <div style={{ fontSize: '11px', color: isUpcoming ? '#d97706' : '#6b7280', marginTop: '2px' }}>
                      {reservation.daysUntilStart === 0 ? 'Starting today' : 
                       reservation.daysUntilStart === 1 ? 'Starting tomorrow' : 
                       `Starting in ${reservation.daysUntilStart} days`}
                    </div>
                  )}
                </div>
                <div>
                  <strong style={{ color: '#059669' }}>Total: {reservation.total} DHS</strong>
                  {reservation.customer.remarks && (
                    <div style={{ fontSize: '12px', color: '#6b7280', marginTop: '5px' }}>
                      Note: {reservation.customer.remarks}
                    </div>
                  )}
                </div>
                <div style={{ display: 'flex', gap: '5px' }}>
                  {reservation.source !== 'client' && (
                    <>
                      <button
                        onClick={() => handleEditReservation(reservation)}
                        style={{
                          backgroundColor: '#3b82f6', color: 'white', border: 'none', padding: '5px 10px',
                          borderRadius: '3px', cursor: 'pointer', fontSize: '12px'
                        }}
                      >
                        ✏️ Edit
                      </button>
                      <button
                        onClick={() => handleDeleteReservation(reservation)}
                        style={{
                          backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '5px 10px',
                          borderRadius: '3px', cursor: 'pointer', fontSize: '12px'
                        }}
                      >
                        🗑️ Delete
                      </button>
                    </>
                  )}
                  {reservation.source === 'client' && (
                    <div style={{ fontSize: '11px', color: '#6b7280', fontStyle: 'italic' }}>
                      From Client Management
                    </div>
                  )}
                </div>
              </div>
            </div>
          );
        })}
      </div>
    )}
  </div>
)}
        {/* Client Management */}
        {showClients && !showClientForm && (
          <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '10px', marginBottom: '20px' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
              <h2 style={{ margin: 0, color: '#1e3a8a' }}>👥 Client Management ({clients.length})</h2>
              <div style={{ display: 'flex', gap: '10px' }}>
             
                <button
                  onClick={() => setShowClientForm(true)}
                  style={{
                    backgroundColor: '#10b981', color: 'white', border: 'none', padding: '10px 20px',
                    borderRadius: '5px', cursor: 'pointer', fontSize: '14px'
                  }}
                >
                  ➕ Add Client
                </button>
                <button
                  onClick={() => setShowClients(false)}
                  style={{
                    backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '8px 16px',
                    borderRadius: '5px', cursor: 'pointer'
                  }}
                >
                  ✕ Close
                </button>
              </div>
            </div>

            {clients.length === 0 ? (
              <div style={{ textAlign: 'center', padding: '40px', color: '#6b7280' }}>
                <div style={{ fontSize: '48px', marginBottom: '10px' }}>👥</div>
                <p>No clients found. Add your first client to get started!</p>
                <button
                  onClick={() => setShowClientForm(true)}
                  style={{
                    backgroundColor: '#3b82f6', color: 'white', border: 'none', padding: '10px 20px',
                    borderRadius: '5px', cursor: 'pointer', marginTop: '10px'
                  }}
                >
                  Add First Client
                </button>
              </div>
            ) : (
              <div style={{ overflowX: 'auto' }}>
                <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '14px' }}>
                  <thead>
                    <tr style={{ backgroundColor: '#f3f4f6' }}>
                      <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Client</th>
                      <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Phone</th>
                      <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Car</th>
                      <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Rental Period</th>
                      <th style={{ padding: '12px', textAlign: 'right', border: '1px solid #d1d5db' }}>Amount</th>
                      <th style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>Payment</th>
                      <th style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>Status</th>
                      <th style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {clients.map((client, index) => {
                      const currentDate = new Date();
                      const endDate = new Date(client.end_date);
                      const startDate = new Date(client.start_date);
                      
                      let status = '';
                      let statusColor = '';
                      if (currentDate < startDate) {
                        status = 'PENDING';
                        statusColor = '#f59e0b';
                      } else if (currentDate >= startDate && currentDate <= endDate) {
                        status = 'ACTIVE';
                        statusColor = '#10b981';
                      } else if (currentDate > endDate && client.full_payment) {
                        status = 'COMPLETED';
                        statusColor = '#6b7280';
                      } else if (currentDate > endDate && !client.full_payment) {
                        status = 'OVERDUE PAYMENT';
                        statusColor = '#ef4444';
                      }
                      
                      const paymentStatus = client.full_payment ? 'Paid Full' : 
                                           client.advance_payment > 0 ? 'Partial' : 'Unpaid';
                      const paymentColor = client.full_payment ? '#10b981' : 
                                          client.advance_payment > 0 ? '#f59e0b' : '#ef4444';

                      return (
                        <tr key={client.id} style={{ backgroundColor: index % 2 === 0 ? '#ffffff' : '#f9fafb' }}>
                          <td style={{ padding: '12px', border: '1px solid #d1d5db', fontWeight: 'bold' }}>
                            {client.client_name}
                          </td>
                          <td style={{ padding: '12px', border: '1px solid #d1d5db' }}>
                            {client.phone || 'N/A'}
                          </td>
                          <td style={{ padding: '12px', border: '1px solid #d1d5db' }}>
                            {client.car_name}
                          </td>
                          <td style={{ padding: '12px', border: '1px solid #d1d5db' }}>
                            <div>{formatDateTime(client.start_date, client.start_time)}</div>
                            <div style={{ fontSize: '12px', color: '#6b7280' }}>
                              to {formatDateTime(client.end_date, client.end_time)}
                            </div>
                          </td>
                          <td style={{ padding: '12px', textAlign: 'right', border: '1px solid #d1d5db' }}>
                            <div style={{ fontWeight: 'bold' }}>{client.total_amount || 0} DHS</div>
                            {client.advance_payment > 0 && (
                              <div style={{ fontSize: '12px', color: '#6b7280' }}>
                                Paid: {client.advance_payment} DHS
                              </div>
                            )}
                          </td>
                          <td style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>
                            <span style={{
                              backgroundColor: paymentColor === '#10b981' ? '#dcfce7' : 
                                             paymentColor === '#f59e0b' ? '#fef3c7' : '#fee2e2',
                              color: paymentColor,
                              padding: '4px 8px',
                              borderRadius: '12px',
                              fontSize: '12px',
                              fontWeight: 'bold'
                            }}>
                              {paymentStatus}
                            </span>
                          </td>
                          <td style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>
                            <span style={{
                              backgroundColor: statusColor === '#10b981' ? '#dcfce7' : 
                                             statusColor === '#f59e0b' ? '#fef3c7' : 
                                             statusColor === '#6b7280' ? '#f3f4f6' : '#fee2e2',
                              color: statusColor,
                              padding: '4px 8px',
                              borderRadius: '12px',
                              fontSize: '11px',
                              fontWeight: 'bold'
                            }}>
                              {status}
                            </span>
                          </td>
                          <td style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>
                            <div style={{ display: 'flex', gap: '5px', justifyContent: 'center' }}>
                              <button
                                onClick={() => handleEditClient(client)}
                                style={{
                                  backgroundColor: '#3b82f6', color: 'white', border: 'none', padding: '5px 10px',
                                  borderRadius: '3px', cursor: 'pointer', fontSize: '12px'
                                }}
                              >
                                ✏️ Edit
                              </button>
                              <button
                                onClick={() => handleDeleteClient(client)}
                                style={{
                                  backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '5px 10px',
                                  borderRadius: '3px', cursor: 'pointer', fontSize: '12px'
                                }}
                              >
                                🗑️ Delete
                              </button>
                            </div>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            )}
          </div>
        )}

        {/* Client Form */}
        {showClientForm && (
          <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '10px', marginBottom: '20px' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
              <h2 style={{ margin: 0, color: '#1e3a8a' }}>
                {editingClient ? '✏️ Edit Client' : '👤 Add New Client'}
              </h2>
              <button
                onClick={() => {
                  setShowClientForm(false);
                  setEditingClient(null);
                  setClientFormData({
                    clientName: '', phone: '', carName: '', startDate: '', startTime: '', endDate: '', endTime: '',
                    totalAmount: 0, advancePayment: 0, fullPayment: false
                  });
                }}
                style={{
                  backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '8px 16px',
                  borderRadius: '5px', cursor: 'pointer'
                }}
              >
                ✕ Cancel
              </button>
            </div>

            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '15px' }}>
              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Client Name *
                </label>
                <input
                  type="text"
                  value={clientFormData.clientName}
                  onChange={(e) => setClientFormData(prev => ({...prev, clientName: e.target.value}))}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px'
                  }}
                  placeholder="Enter client name"
                />
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Phone
                </label>
                <input
                  type="tel"
                  value={clientFormData.phone}
                  onChange={(e) => setClientFormData(prev => ({...prev, phone: e.target.value}))}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px'
                  }}
                  placeholder="+212600000000"
                />
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Car *
                </label>
              <select
  value={clientFormData.carName}
  onChange={(e) => {
    const selectedCar = cars.find(car => car.name === e.target.value);
    setClientFormData(prev => ({
      ...prev, 
      carName: e.target.value,
      plateNumber: selectedCar ? selectedCar.plate_number : ''
    }));
  }}
  style={{
    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
    fontSize: '14px'
  }}
>
  <option value="">Select Car</option>
  {cars.map(car => (
    <option key={car.id} value={car.name}>{car.name} ({car.plate_number}) - {car.price} DHS/day</option>
  ))}
</select>
              </div>
{clientFormData.plateNumber && (
  <div>
    <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
      Plate Number
    </label>
    <input
      type="text"
      value={clientFormData.plateNumber}
      readOnly
      style={{
        width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
        fontSize: '14px', backgroundColor: '#f9fafb', color: '#6b7280'
      }}
    />
  </div>
)}
             <div>
  <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
    Start Date *
  </label>
  <input
    type="date"
    value={clientFormData.startDate}
    onChange={(e) => setClientFormData(prev => ({...prev, startDate: e.target.value}))}
    max={new Date().toISOString().split('T')[0]}
    style={{
      width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
      fontSize: '14px'
    }}
  />
</div>
              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Start Time
                </label>
                <input
                  type="time"
                  value={clientFormData.startTime}
                  onChange={(e) => setClientFormData(prev => ({...prev, startTime: e.target.value}))}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px'
                  }}
                />
              </div>

            <div>
  <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
    End Date *
  </label>
  <input
    type="date"
    value={clientFormData.endDate}
    onChange={(e) => setClientFormData(prev => ({...prev, endDate: e.target.value}))}
    min={clientFormData.startDate || new Date().toISOString().split('T')[0]}

    style={{
      width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
      fontSize: '14px'
    }}
  />
</div>

              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  End Time
                </label>
                <input
                  type="time"
                  value={clientFormData.endTime}
                  onChange={(e) => setClientFormData(prev => ({...prev, endTime: e.target.value}))}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px'
                  }}
                />
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Total Amount (DHS)
                </label>
                <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
                  <input
                    type="number"
                    value={clientFormData.totalAmount}
                    onChange={(e) => setClientFormData(prev => ({...prev, totalAmount: parseFloat(e.target.value) || 0}))}
                    style={{
                      flex: 1, padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                      fontSize: '14px'
                    }}
                    placeholder="0"
                  />
                  {calculateSuggestedTotal() > 0 && (
                    <button
                      type="button"
                      onClick={() => setClientFormData(prev => ({...prev, totalAmount: calculateSuggestedTotal()}))}
                      style={{
                        backgroundColor: '#10b981', color: 'white', border: 'none', padding: '5px 10px',
                        borderRadius: '3px', cursor: 'pointer', fontSize: '12px'
                      }}
                    >
                      Use {calculateSuggestedTotal()}
                    </button>
                  )}
                </div>
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Advance Payment (DHS)
                </label>
                <input
                  type="number"
                  value={clientFormData.advancePayment}
                  onChange={(e) => setClientFormData(prev => ({...prev, advancePayment: parseFloat(e.target.value) || 0}))}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px'
                  }}
                  placeholder="0"
                />
              </div>

              <div style={{ display: 'flex', alignItems: 'center', gap: '10px', gridColumn: '1 / -1' }}>
                <input
                  type="checkbox"
                  id="fullPayment"
                  checked={clientFormData.fullPayment}
                  onChange={(e) => setClientFormData(prev => ({...prev, fullPayment: e.target.checked}))}
                  style={{ transform: 'scale(1.2)' }}
                />
                <label htmlFor="fullPayment" style={{ fontWeight: 'bold', color: '#374151' }}>
                  Payment Complete
                </label>
                {clientFormData.totalAmount > 0 && clientFormData.advancePayment > 0 && (
                  <span style={{ 
                    marginLeft: '20px', padding: '5px 10px', borderRadius: '15px',
                    backgroundColor: clientFormData.fullPayment ? '#dcfce7' : '#fef3c7',
                    color: clientFormData.fullPayment ? '#166534' : '#92400e',
                    fontSize: '12px', fontWeight: 'bold'
                  }}>
                    Remaining: {clientFormData.totalAmount - clientFormData.advancePayment} DHS
                  </span>
                )}
              </div>
            </div>

            <div style={{ marginTop: '20px', textAlign: 'center' }}>
              <button
                onClick={handleClientSubmit}
                disabled={loading}
                style={{
                  backgroundColor: '#10b981', color: 'white', border: 'none', padding: '12px 30px',
                  borderRadius: '5px', cursor: loading ? 'not-allowed' : 'pointer', fontSize: '16px',
                  fontWeight: 'bold', opacity: loading ? 0.7 : 1
                }}
              >
                {loading ? '⏳ Saving...' : editingClient ? '✏️ Update Client' : '👤 Add Client'}
              </button>
            </div>
          </div>
        )}

   {/* Statistics View */}
        {showStats && (
          <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '10px', marginBottom: '20px' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
              <h2 style={{ margin: 0, color: '#1e3a8a' }}>
                📊 Business Analytics Dashboard {selectedYear === 'all' ? '(All Years)' : `(${selectedYear})`}
              </h2>
              <button
                onClick={() => setShowStats(false)}
                style={{
                  backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '8px 16px',
                  borderRadius: '5px', cursor: 'pointer'
                }}
              >
                ✕ Close
              </button>
            </div>

             {/* Year Filter Section */}
            <div style={{ marginBottom: '20px', padding: '15px', backgroundColor: '#f3f4f6', borderRadius: '8px' }}>
              <div style={{ display: 'flex', alignItems: 'center', gap: '15px', flexWrap: 'wrap' }}>
                <span style={{ fontWeight: 'bold', color: '#374151' }}>📅 Filter by Year:</span>
                <div style={{ display: 'flex', gap: '8px', flexWrap: 'wrap' }}>
                  <button
                    onClick={() => setSelectedYear('all')}
                    style={{
                      backgroundColor: selectedYear === 'all' ? '#3b82f6' : 'white',
                      color: selectedYear === 'all' ? 'white' : '#374151',
                      border: '1px solid #d1d5db', padding: '6px 12px',
                      borderRadius: '5px', cursor: 'pointer', fontSize: '14px'
                    }}
                  >
                    All Years
                  </button>
                  {(() => {
                    const availableYears = new Set();
                    
                    [...getAllReservations(), ...clients].forEach(item => {
                      const startYear = new Date(item.start_date || item.start).getFullYear();
                      availableYears.add(startYear);
                    });
                    
                    charges.forEach(charge => {
                      const chargeYear = new Date(charge.date).getFullYear();
                      availableYears.add(chargeYear);
                    });
                    
                    return Array.from(availableYears).sort((a, b) => b - a).map(year => (
                      <button
                        key={year}
                        onClick={() => setSelectedYear(year)}
                        style={{
                          backgroundColor: selectedYear === year ? '#3b82f6' : 'white',
                          color: selectedYear === year ? 'white' : '#374151',
                          border: '1px solid #d1d5db', padding: '6px 12px',
                          borderRadius: '5px', cursor: 'pointer', fontSize: '14px'
                        }}
                      >
                        {year}
                      </button>
                    ));
                  })()}
                </div>
                {selectedYear !== 'all' && (
                  <span style={{ color: '#6b7280', fontSize: '14px', fontStyle: 'italic' }}>
                    Showing data for {selectedYear} only
                  </span>
                )}
              </div>
            </div>

            {(() => {
              // Calculate comprehensive statistics based on rental DAYS
              const allReservations = getAllReservations();
              const currentDate = new Date();
              
              // Initialize data structures
              const carRentalDays = {};
              const carRevenue = {};
              const carExpenses = {};
              const monthlyData = {};
              const yearlyData = {};
              const carMonthlyData = {};
              
              cars.forEach(car => {
                carRentalDays[car.name] = 0;
                carRevenue[car.name] = 0;
                carExpenses[car.name] = 0;
                carMonthlyData[car.name] = {};
              });

              // Initialize monthly data structure (12 months)
              const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
              for (let i = 0; i < 12; i++) {
                monthlyData[monthNames[i]] = { rentalDays: 0, revenue: 0, expenses: 0 };
              }

              // Helper function to calculate rental days
const calculateRentalDays = (startDate, endDate) => {
  const start = new Date(startDate);
  const end = new Date(endDate);
  return Math.ceil((end - start) / (1000 * 60 * 60 * 24));
};

              // Helper function to distribute rental days across months
              const distributeRentalDaysAcrossMonths = (startDate, endDate, carName, revenue) => {
                const start = new Date(startDate);
                const end = new Date(endDate);
                const totalDays = calculateRentalDays(startDate, endDate);
                const dailyRevenue = totalDays > 0 ? revenue / totalDays : 0;

                let currentDate = new Date(start);
                while (currentDate <= end) {
                  const year = currentDate.getFullYear();
                  const month = currentDate.getMonth();
                  const monthName = monthNames[month];
                  
                  // Calculate days in this month for this rental
                  const monthStart = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
                  const monthEnd = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
                  
                  const periodStart = currentDate > start ? currentDate : start;
                  const periodEnd = end < monthEnd ? end : monthEnd;
                  
                  if (periodStart <= periodEnd) {
                    const daysInMonth = Math.ceil((periodEnd - periodStart) / (1000 * 60 * 60 * 24)) ;
                    const monthRevenue = daysInMonth * dailyRevenue;
                    
                    // Monthly aggregation
                    monthlyData[monthName].rentalDays += daysInMonth;
                    monthlyData[monthName].revenue += monthRevenue;

                    // Yearly aggregation
                    if (!yearlyData[year]) {
                      yearlyData[year] = { rentalDays: 0, revenue: 0, expenses: 0 };
                    }
                    yearlyData[year].rentalDays += daysInMonth;
                    yearlyData[year].revenue += monthRevenue;

                    // Car-specific monthly data
                    if (!carMonthlyData[carName][monthName]) {
                      carMonthlyData[carName][monthName] = { rentalDays: 0, revenue: 0 };
                    }
                    carMonthlyData[carName][monthName].rentalDays += daysInMonth;
                    carMonthlyData[carName][monthName].revenue += monthRevenue;
                  }
                  
                  // Move to next month
                  currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 1);
                }
              };

            // Filter data by selected year
              const filterByYear = (item, dateField) => {
                if (selectedYear === 'all') return true;
                const itemYear = new Date(item[dateField]).getFullYear();
                return itemYear === selectedYear;
              };

             // Process only confirmed clients with year filter
const allBookings = [
  ...clients.filter(client => filterByYear(client, 'start_date')).map(client => ({
    carName: client.car_name,
    startDate: client.start_date,
    endDate: client.end_date,
    revenue: client.total_amount || 0,
    source: 'client'
  }))
];

              // Process bookings for rental days calculation
              allBookings.forEach(booking => {
                const rentalDays = calculateRentalDays(booking.startDate, booking.endDate);

                // Car rental days and revenue
                if (carRentalDays[booking.carName] !== undefined) {
                  carRentalDays[booking.carName] += rentalDays;
                  carRevenue[booking.carName] += booking.revenue;
                }

                // Distribute across months and years
                distributeRentalDaysAcrossMonths(booking.startDate, booking.endDate, booking.carName, booking.revenue);
              });

             // Process expenses with year filter
              const filteredCharges = selectedYear === 'all' ? charges : 
                charges.filter(charge => filterByYear(charge, 'date'));
              
              filteredCharges.forEach(charge => {
                const chargeDate = new Date(charge.date);
                const year = chargeDate.getFullYear();
                const month = chargeDate.getMonth();
                const monthName = monthNames[month];

                // Car-specific expenses
                if (charge.car_name && carExpenses[charge.car_name] !== undefined) {
                  carExpenses[charge.car_name] += charge.amount || 0;
                }

                // Monthly expenses
                monthlyData[monthName].expenses += charge.amount || 0;

                // Yearly expenses
                if (!yearlyData[year]) {
                  yearlyData[year] = { rentalDays: 0, revenue: 0, expenses: 0 };
                }
                yearlyData[year].expenses += charge.amount || 0;
              });

              // Prepare chart data based on rental days
              const popularityData = cars.map(car => ({
                name: car.name.length > 15 ? car.name.substring(0, 15) + '...' : car.name,
                fullName: car.name,
                rentalDays: carRentalDays[car.name],
                price: car.price,
                utilization: Math.round((carRentalDays[car.name] / 365) * 100) // Annual utilization percentage
              })).sort((a, b) => b.rentalDays - a.rentalDays);

              const profitabilityData = cars.map(car => ({
                name: car.name.length > 15 ? car.name.substring(0, 15) + '...' : car.name,
                fullName: car.name,
                revenue: carRevenue[car.name],
                expenses: carExpenses[car.name],
                profit: carRevenue[car.name] - carExpenses[car.name],
                rentalDays: carRentalDays[car.name],
                revenuePerDay: carRentalDays[car.name] > 0 ? Math.round(carRevenue[car.name] / carRentalDays[car.name]) : 0
              })).sort((a, b) => b.profit - a.profit);

              const expenseData = cars.map(car => ({
                name: car.name.length > 15 ? car.name.substring(0, 15) + '...' : car.name,
                fullName: car.name,
                expenses: carExpenses[car.name],
                revenue: carRevenue[car.name],
                rentalDays: carRentalDays[car.name]
              })).filter(car => car.expenses > 0);

              // Monthly analysis data
              const monthlyChartData = monthNames.map(month => ({
                month,
                rentalDays: monthlyData[month].rentalDays,
                revenue: monthlyData[month].revenue,
                expenses: monthlyData[month].expenses,
                profit: monthlyData[month].revenue - monthlyData[month].expenses
              }));

              // Yearly analysis data
              const yearlyChartData = Object.keys(yearlyData).sort().map(year => ({
                year: parseInt(year),
                rentalDays: yearlyData[year].rentalDays,
                revenue: yearlyData[year].revenue,
                expenses: yearlyData[year].expenses,
                profit: yearlyData[year].revenue - yearlyData[year].expenses
              }));

              // Find peak and low months based on rental days
              const peakMonth = monthlyChartData.reduce((max, month) => 
                month.rentalDays > max.rentalDays ? month : max, monthlyChartData[0]);
              const lowMonth = monthlyChartData.filter(m => m.rentalDays > 0).reduce((min, month) => 
                month.rentalDays < min.rentalDays ? month : min, monthlyChartData.find(m => m.rentalDays > 0) || monthlyChartData[0]);

              // Car performance by month analysis based on rental days
              const carMonthlyPerformance = cars.map(car => {
                const months = monthNames.map(month => ({
                  month,
                  rentalDays: carMonthlyData[car.name][month]?.rentalDays || 0,
                  revenue: carMonthlyData[car.name][month]?.revenue || 0
                }));
                const totalRentalDays = months.reduce((sum, m) => sum + m.rentalDays, 0);
                const bestMonth = months.reduce((max, month) => month.rentalDays > max.rentalDays ? month : max, months[0]);
                
                return {
                  carName: car.name,
                  totalRentalDays,
                  bestMonth: bestMonth.rentalDays > 0 ? bestMonth.month : 'None',
                  bestMonthDays: bestMonth.rentalDays,
                  months,
                  avgDaysPerMonth: Math.round(totalRentalDays / 12)
                };
              }).sort((a, b) => b.totalRentalDays - a.totalRentalDays);

              // Performance metrics
              const totalRevenue = Object.values(carRevenue).reduce((sum, rev) => sum + rev, 0);
              const totalExpenses = filteredCharges.reduce((sum, charge) => sum + (charge.amount || 0), 0);
              const totalRentalDays = Object.values(carRentalDays).reduce((sum, days) => sum + days, 0);
              const averageRevenuePerDay = totalRentalDays > 0 ? Math.round(totalRevenue / totalRentalDays) : 0;
              const totalBookings = clients.filter(client => selectedYear === 'all' ? true : filterByYear(client, 'start_date')).length;

              // Active vs completed reservations
              const activeReservations = [...allReservations, ...clients].filter(reservation => {
                const endDate = new Date(reservation.end_date || reservation.end);
                return currentDate <= endDate;
              });

              return (
                <div style={{ display: 'grid', gap: '30px' }}>
                  
                  {/* Key Metrics Cards */}
                  <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', gap: '15px' }}>
                    <div style={{ backgroundColor: '#dcfce7', padding: '20px', borderRadius: '10px', textAlign: 'center', border: '1px solid #10b981' }}>
                      <div style={{ fontSize: '28px', fontWeight: 'bold', color: '#059669' }}>{totalRevenue} DHS</div>
                      <div style={{ color: '#065f46', fontSize: '14px' }}>Total Revenue</div>
                    </div>
                    <div style={{ backgroundColor: '#fee2e2', padding: '20px', borderRadius: '10px', textAlign: 'center', border: '1px solid #ef4444' }}>
                      <div style={{ fontSize: '28px', fontWeight: 'bold', color: '#dc2626' }}>{totalExpenses} DHS</div>
                      <div style={{ color: '#991b1b', fontSize: '14px' }}>Total Expenses</div>
                    </div>
                    <div style={{ backgroundColor: '#dbeafe', padding: '20px', borderRadius: '10px', textAlign: 'center', border: '1px solid #3b82f6' }}>
                      <div style={{ fontSize: '28px', fontWeight: 'bold', color: '#2563eb' }}>{totalRevenue - totalExpenses} DHS</div>
                      <div style={{ color: '#1d4ed8', fontSize: '14px' }}>Net Profit</div>
                    </div>
                    <div style={{ backgroundColor: '#fef3c7', padding: '20px', borderRadius: '10px', textAlign: 'center', border: '1px solid #f59e0b' }}>
                      <div style={{ fontSize: '28px', fontWeight: 'bold', color: '#d97706' }}>{totalRentalDays}</div>
                      <div style={{ color: '#92400e', fontSize: '14px' }}>Total Rental Days</div>
                    </div>
                    <div style={{ backgroundColor: '#f3e8ff', padding: '20px', borderRadius: '10px', textAlign: 'center', border: '1px solid #8b5cf6' }}>
                      <div style={{ fontSize: '28px', fontWeight: 'bold', color: '#7c3aed' }}>{averageRevenuePerDay} DHS</div>
                      <div style={{ color: '#5b21b6', fontSize: '14px' }}>Revenue per Day</div>
                    </div>
                    <div style={{ backgroundColor: '#ecfdf5', padding: '20px', borderRadius: '10px', textAlign: 'center', border: '1px solid #10b981' }}>
                      <div style={{ fontSize: '28px', fontWeight: 'bold', color: '#059669' }}>{totalBookings}</div>
                      <div style={{ color: '#065f46', fontSize: '14px' }}>Total Bookings</div>
                    </div>
                  </div>

                  {/* Monthly Performance Analysis */}
                  <div>
                    <h3 style={{ color: '#1e3a8a', marginBottom: '15px' }}>📅 Monthly Rental Days Analysis (All Years)</h3>
                    <ResponsiveContainer width="100%" height={350}>
                      <BarChart data={monthlyChartData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="month" />
                        <YAxis />
                        <Tooltip formatter={(value, name) => [`${value} ${name === 'rentalDays' ? 'days' : 'DHS'}`, 
                          name === 'rentalDays' ? 'Rental Days' : name === 'revenue' ? 'Revenue' : 
                          name === 'expenses' ? 'Expenses' : 'Profit']} />
                        <Legend />
                        <Bar dataKey="rentalDays" fill="#8b5cf6" name="Rental Days" />
                        <Bar dataKey="revenue" fill="#10b981" name="Revenue" />
                        <Bar dataKey="expenses" fill="#ef4444" name="Expenses" />
                        <Bar dataKey="profit" fill="#3b82f6" name="Profit" />
                      </BarChart>
                    </ResponsiveContainer>
                    <div style={{ display: 'flex', justifyContent: 'space-between', marginTop: '10px', padding: '10px', backgroundColor: '#f3f4f6', borderRadius: '8px' }}>
                      <span style={{ color: '#059669', fontWeight: 'bold' }}>
                        📈 Peak Month: {peakMonth?.month} ({peakMonth?.rentalDays} days)
                      </span>
                      <span style={{ color: '#dc2626', fontWeight: 'bold' }}>
                        📉 Low Month: {lowMonth?.month} ({lowMonth?.rentalDays} days)
                      </span>
                    </div>
                  </div>

                  {/* Yearly Performance Analysis */}
                  {yearlyChartData.length > 1 && (
                    <div>
                      <h3 style={{ color: '#1e3a8a', marginBottom: '15px' }}>🗓️ Yearly Rental Days Trends</h3>
                      <ResponsiveContainer width="100%" height={350}>
                        <LineChart data={yearlyChartData}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="year" />
                          <YAxis />
                          <Tooltip formatter={(value, name) => [`${value} ${name === 'rentalDays' ? 'days' : 'DHS'}`, 
                            name === 'rentalDays' ? 'Rental Days' : name === 'revenue' ? 'Revenue' : 
                            name === 'expenses' ? 'Expenses' : 'Profit']} />
                          <Legend />
                          <Line type="monotone" dataKey="rentalDays" stroke="#8b5cf6" strokeWidth={3} name="Rental Days" />
                          <Line type="monotone" dataKey="revenue" stroke="#10b981" strokeWidth={3} name="Revenue" />
                          <Line type="monotone" dataKey="expenses" stroke="#ef4444" strokeWidth={3} name="Expenses" />
                          <Line type="monotone" dataKey="profit" stroke="#3b82f6" strokeWidth={3} name="Profit" />
                        </LineChart>
                      </ResponsiveContainer>
                    </div>
                  )}

                  {/* Car Monthly Performance Table */}
                  {carMonthlyPerformance.length > 0 && (
                    <div>
                      <h3 style={{ color: '#1e3a8a', marginBottom: '15px' }}>🚗 Car Rental Days by Month</h3>
                      <div style={{ overflowX: 'auto', backgroundColor: '#f9fafb', padding: '15px', borderRadius: '10px' }}>
                        <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '12px' }}>
                          <thead>
                            <tr style={{ backgroundColor: '#f3f4f6' }}>
                              <th style={{ padding: '8px', textAlign: 'left', border: '1px solid #d1d5db', minWidth: '120px' }}>Car</th>
                              <th style={{ padding: '8px', textAlign: 'center', border: '1px solid #d1d5db' }}>Total Days</th>
                              <th style={{ padding: '8px', textAlign: 'center', border: '1px solid #d1d5db' }}>Best Month</th>
                              <th style={{ padding: '8px', textAlign: 'center', border: '1px solid #d1d5db' }}>Avg/Month</th>
                              {monthNames.map(month => (
                                <th key={month} style={{ padding: '8px', textAlign: 'center', border: '1px solid #d1d5db', minWidth: '45px' }}>
                                  {month}
                                </th>
                              ))}
                            </tr>
                          </thead>
                          <tbody>
                            {carMonthlyPerformance.map((car, index) => (
                              <tr key={car.carName} style={{ backgroundColor: index % 2 === 0 ? '#ffffff' : '#f9fafb' }}>
                                <td style={{ padding: '8px', border: '1px solid #d1d5db', fontWeight: 'bold', fontSize: '11px' }}>
                                  {car.carName.length > 20 ? car.carName.substring(0, 20) + '...' : car.carName}
                                </td>
                                <td style={{ padding: '8px', textAlign: 'center', border: '1px solid #d1d5db', fontWeight: 'bold', color: '#059669' }}>
                                  {car.totalRentalDays}
                                </td>
                                <td style={{ padding: '8px', textAlign: 'center', border: '1px solid #d1d5db', fontWeight: 'bold', color: '#3b82f6' }}>
                                  {car.bestMonth} ({car.bestMonthDays})
                                </td>
                                <td style={{ padding: '8px', textAlign: 'center', border: '1px solid #d1d5db', color: '#6b7280' }}>
                                  {car.avgDaysPerMonth}
                                </td>
                                {car.months.map(month => (
                                  <td key={month.month} style={{ 
                                    padding: '8px', textAlign: 'center', border: '1px solid #d1d5db',
                                    backgroundColor: month.rentalDays > 0 ? (month.rentalDays === car.bestMonthDays && car.bestMonthDays > 0 ? '#dcfce7' : '#f0f9ff') : '#ffffff',
                                    color: month.rentalDays > 0 ? '#059669' : '#6b7280',
                                    fontWeight: month.rentalDays === car.bestMonthDays && car.bestMonthDays > 0 ? 'bold' : 'normal'
                                  }}>
                                    {month.rentalDays || '-'}
                                  </td>
                                ))}
                              </tr>
                            ))}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  )}

                  {/* Car Utilization Chart */}
                  {popularityData.some(car => car.rentalDays > 0) && (
                    <div>
                      <h3 style={{ color: '#1e3a8a', marginBottom: '15px' }}>🏆 Most Utilized Cars (By Rental Days)</h3>
                      <ResponsiveContainer width="100%" height={300}>
                        <BarChart data={popularityData}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="name" angle={-45} textAnchor="end" height={80} fontSize={12} />
                          <YAxis />
                          <Tooltip 
                            formatter={(value, name) => [value, name === 'rentalDays' ? 'Rental Days' : name === 'utilization' ? 'Utilization %' : 'Price/Day']}
                            labelFormatter={(label) => {
                              const car = popularityData.find(c => c.name === label);
                              return car ? car.fullName : label;
                            }}
                          />
                          <Legend />
                          <Bar dataKey="rentalDays" fill="#10b981" name="Rental Days" />
                          <Bar dataKey="utilization" fill="#8b5cf6" name="Utilization %" />
                        </BarChart>
                      </ResponsiveContainer>
                    </div>
                  )}

                  {/* Profitability Analysis */}
                  <div>
                    <h3 style={{ color: '#1e3a8a', marginBottom: '15px' }}>💰 Car Profitability Analysis</h3>
                    <ResponsiveContainer width="100%" height={350}>
                      <BarChart data={profitabilityData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" angle={-45} textAnchor="end" height={80} fontSize={12} />
                        <YAxis />
                        <Tooltip 
                          formatter={(value, name) => [
                            `${value} ${name === 'rentalDays' ? 'days' : name === 'revenuePerDay' ? 'DHS/day' : 'DHS'}`, 
                            name === 'revenue' ? 'Revenue' : name === 'expenses' ? 'Expenses' : 
                            name === 'profit' ? 'Profit' : name === 'rentalDays' ? 'Rental Days' : 'Revenue/Day'
                          ]}
                          labelFormatter={(label) => {
                            const car = profitabilityData.find(c => c.name === label);
                            return car ? car.fullName : label;
                          }}
                        />
                        <Legend />
                        <Bar dataKey="revenue" fill="#10b981" name="Revenue" />
                        <Bar dataKey="expenses" fill="#ef4444" name="Expenses" />
                        <Bar dataKey="profit" fill="#3b82f6" name="Net Profit" />
                        <Bar dataKey="revenuePerDay" fill="#f59e0b" name="Revenue/Day" />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>

                  {/* Expenses Breakdown */}
                  {expenseData.length > 0 && (
                    <div>
                      <h3 style={{ color: '#1e3a8a', marginBottom: '15px' }}>📉 Car Expenses vs Revenue</h3>
                      <ResponsiveContainer width="100%" height={300}>
                        <LineChart data={expenseData}>
                          <CartesianGrid strokeDasharray="3 3" />
                          <XAxis dataKey="name" angle={-45} textAnchor="end" height={80} fontSize={12} />
                          <YAxis />
                          <Tooltip 
                            formatter={(value, name) => [`${value} ${name === 'rentalDays' ? 'days' : 'DHS'}`, 
                              name === 'expenses' ? 'Expenses' : name === 'revenue' ? 'Revenue' : 'Rental Days']}
                            labelFormatter={(label) => {
                              const car = expenseData.find(c => c.name === label);
                              return car ? car.fullName : label;
                            }}
                          />
                          <Legend />
                          <Line type="monotone" dataKey="expenses" stroke="#ef4444" strokeWidth={3} name="Expenses" />
                          <Line type="monotone" dataKey="revenue" stroke="#10b981" strokeWidth={3} name="Revenue" />
                          <Line type="monotone" dataKey="rentalDays" stroke="#8b5cf6" strokeWidth={2} name="Rental Days" />
                        </LineChart>
                      </ResponsiveContainer>
                    </div>
                  )}

                  {/* Business Insights */}
                  <div style={{ backgroundColor: '#f0f9ff', padding: '20px', borderRadius: '10px', border: '1px solid #0ea5e9' }}>
                    <h3 style={{ color: '#0369a1', marginBottom: '15px' }}>🎯 Business Insights & Recommendations (Rental Days Focus)</h3>
                    <div style={{ display: 'grid', gap: '15px' }}>
                      
                      {/* Most utilized car */}
                      {popularityData.length > 0 && popularityData[0].rentalDays > 0 && (
                        <div style={{ padding: '15px', backgroundColor: '#dcfce7', borderRadius: '8px' }}>
                          <strong style={{ color: '#059669' }}>🏆 Most Utilized: </strong>
                          <span style={{ color: '#065f46' }}>
                            {popularityData[0].fullName} with {popularityData[0].rentalDays} rental days ({popularityData[0].utilization}% annual utilization).
                          </span>
                        </div>
                      )}

                      {/* Most profitable per day */}
                      {profitabilityData.length > 0 && profitabilityData[0].revenuePerDay > 0 && (
                        <div style={{ padding: '15px', backgroundColor: '#fef3c7', borderRadius: '8px' }}>
                          <strong style={{ color: '#d97706' }}>⭐ Best Daily Rate: </strong>
                          <span style={{ color: '#92400e' }}>
                            {profitabilityData.find(car => car.revenuePerDay > 0)?.fullName} generates {profitabilityData.find(car => car.revenuePerDay > 0)?.revenuePerDay} DHS per rental day.
                          </span>
                        </div>
                      )}

                      {/* Seasonal insights */}
                      {peakMonth && lowMonth && peakMonth.rentalDays > 0 && (
                        <div style={{ padding: '15px', backgroundColor: '#e0e7ff', borderRadius: '8px' }}>
                          <strong style={{ color: '#3730a3' }}>🗓️ Seasonal Usage: </strong>
                          <span style={{ color: '#312e81' }}>
                            {peakMonth.month} is peak with {peakMonth.rentalDays} rental days, 
                            while {lowMonth.month} is lowest with {lowMonth.rentalDays} days. 
                            Consider dynamic pricing during peak months.
                          </span>
                        </div>
                      )}

                      {/* Car utilization insights */}
                      {carMonthlyPerformance.length > 0 && (
                        <div style={{ padding: '15px', backgroundColor: '#f0fdf4', borderRadius: '8px' }}>
                          <strong style={{ color: '#15803d' }}>📊 Utilization Leaders: </strong>
                          <span style={{ color: '#166534' }}>
                            {carMonthlyPerformance.slice(0, 3).map(car => 
                              `${car.carName.split(' ')[0]} (${car.totalRentalDays} days)`
                            ).join(', ')}. Focus marketing on underutilized vehicles.
                          </span>
                        </div>
                      )}

                      {/* Fleet efficiency */}
{(() => {
                        const avgUtilization = popularityData.reduce((sum, car) => sum + car.utilization, 0) / popularityData.length;
                        const underutilized = popularityData.filter(car => car.utilization < 20).length;
                        return (
                          <div style={{ padding: '15px', backgroundColor: '#fef7ff', borderRadius: '8px' }}>
                            <strong style={{ color: '#a21caf' }}>📈 Fleet Efficiency: </strong>
                            <span style={{ color: '#831843' }}>
                              Average utilization is {Math.round(avgUtilization)}%. 
                              {underutilized > 0 && ` ${underutilized} cars are underutilized (<20%). Consider pricing adjustments or marketing focus.`}
                            </span>
                          </div>
                        );
                      })()}

                      {/* Revenue optimization */}
                      {(() => {
                        const highUtilizationLowPrice = popularityData.find(car => car.utilization > 50 && car.price < 350);
                        if (highUtilizationLowPrice) {
                          return (
                            <div style={{ padding: '15px', backgroundColor: '#dbeafe', borderRadius: '8px' }}>
                              <strong style={{ color: '#2563eb' }}>💡 Revenue Opportunity: </strong>
                              <span style={{ color: '#1d4ed8' }}>
                                {highUtilizationLowPrice.fullName} has {highUtilizationLowPrice.utilization}% utilization at {highUtilizationLowPrice.price} DHS/day. 
                                Consider testing higher prices during peak demand.
                              </span>
                            </div>
                          );
                        }
                        return null;
                      })()}

                      {/* Underperforming cars */}
                      {(() => {
                        const underPerformers = popularityData.filter(car => car.rentalDays === 0).slice(0, 3);
                        if (underPerformers.length > 0) {
                          return (
                            <div style={{ padding: '15px', backgroundColor: '#fee2e2', borderRadius: '8px' }}>
                              <strong style={{ color: '#dc2626' }}>⚠️ Zero Utilization: </strong>
                              <span style={{ color: '#991b1b' }}>
                                {underPerformers.map(car => car.fullName).join(', ')} have no rental days. 
                                Review pricing, condition, or consider fleet optimization.
                              </span>
                            </div>
                          );
                        }
                        return null;
                      })()}

                      {/* Daily revenue efficiency */}
                      <div style={{ padding: '15px', backgroundColor: '#f3e8ff', borderRadius: '8px' }}>
                        <strong style={{ color: '#7c3aed' }}>💰 Daily Revenue: </strong>
                        <span style={{ color: '#5b21b6' }}>
                          Average revenue per rental day across fleet: {averageRevenuePerDay} DHS. 
                          Total productive days: {totalRentalDays} out of {cars.length * 365} possible days 
                          ({Math.round((totalRentalDays / (cars.length * 365)) * 100)}% fleet utilization).
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              );
            })()}
          </div>
        )}
       {/* Charges View */}
{showCharges && !showChargeForm && (
  <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '10px', marginBottom: '20px' }}>
    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
      <h2 style={{ margin: 0, color: '#1e3a8a' }}>💰 Charges & Expenses ({charges.length})</h2>
      <div style={{ display: 'flex', gap: '10px' }}>
        <button
          onClick={() => setShowChargeForm(true)}
          style={{
            backgroundColor: '#10b981', color: 'white', border: 'none', padding: '10px 20px',
            borderRadius: '5px', cursor: 'pointer', fontSize: '14px'
          }}
        >
          ➕ Add Charge
        </button>
        <button
          onClick={() => setShowCharges(false)}
          style={{
            backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '8px 16px',
            borderRadius: '5px', cursor: 'pointer'
          }}
        >
          ✕ Close
        </button>
      </div>
    </div>

    {charges.length === 0 ? (
      <div style={{ textAlign: 'center', padding: '40px', color: '#6b7280' }}>
        <div style={{ fontSize: '48px', marginBottom: '10px' }}>💰</div>
        <p>No charges found. Add your first expense to get started!</p>
        <button
          onClick={() => setShowChargeForm(true)}
          style={{
            backgroundColor: '#3b82f6', color: 'white', border: 'none', padding: '10px 20px',
            borderRadius: '5px', cursor: 'pointer', marginTop: '10px'
          }}
        >
          Add First Charge
        </button>
      </div>
    ) : (
      <div style={{ overflowX: 'auto' }}>
        <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '14px' }}>
          <thead>
            <tr style={{ backgroundColor: '#f3f4f6' }}>
              <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Date</th>
              <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Description</th>
              <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Category</th>
              <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Car</th>
              <th style={{ padding: '12px', textAlign: 'right', border: '1px solid #d1d5db' }}>Amount</th>
              <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Remarks</th>
              <th style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>Actions</th>
            </tr>
          </thead>
          <tbody>
            {charges.map((charge, index) => (
              <tr key={charge.id} style={{ backgroundColor: index % 2 === 0 ? '#ffffff' : '#f9fafb' }}>
                <td style={{ padding: '12px', border: '1px solid #d1d5db' }}>
                  {formatDate(charge.date)}
                </td>
                <td style={{ padding: '12px', border: '1px solid #d1d5db', fontWeight: 'bold' }}>
                  {charge.description}
                </td>
                <td style={{ padding: '12px', border: '1px solid #d1d5db' }}>
                  <span style={{
                    backgroundColor: charge.category === 'maintenance' ? '#fef3c7' : 
                                    charge.category === 'fuel' ? '#dbeafe' : 
                                    charge.category === 'insurance' ? '#fee2e2' : '#f3f4f6',
                    color: charge.category === 'maintenance' ? '#92400e' : 
                           charge.category === 'fuel' ? '#1e40af' : 
                           charge.category === 'insurance' ? '#dc2626' : '#374151',
                    padding: '4px 8px',
                    borderRadius: '12px',
                    fontSize: '12px',
                    fontWeight: 'bold'
                  }}>
                    {charge.category.charAt(0).toUpperCase() + charge.category.slice(1)}
                  </span>
                </td>
                <td style={{ padding: '12px', border: '1px solid #d1d5db' }}>
                  {charge.car_name || 'General'}
                </td>
                <td style={{ padding: '12px', textAlign: 'right', border: '1px solid #d1d5db', color: '#dc2626', fontWeight: 'bold' }}>
                  {charge.amount} DHS
                </td>
                <td style={{ padding: '12px', border: '1px solid #d1d5db', fontSize: '12px', color: '#6b7280' }}>
                  {charge.remarks || 'N/A'}
                </td>
                <td style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>
                  <div style={{ display: 'flex', gap: '5px', justifyContent: 'center' }}>
                    <button
                      onClick={() => handleEditCharge(charge)}
                      style={{
                        backgroundColor: '#3b82f6', color: 'white', border: 'none', padding: '5px 10px',
                        borderRadius: '3px', cursor: 'pointer', fontSize: '12px'
                      }}
                    >
                      ✏️ Edit
                    </button>
                    <button
                      onClick={() => handleDeleteCharge(charge)}
                      style={{
                        backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '5px 10px',
                        borderRadius: '3px', cursor: 'pointer', fontSize: '12px'
                      }}
                    >
                      🗑️ Delete
                    </button>
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        
        {/* Summary */}
        <div style={{ marginTop: '20px', padding: '15px', backgroundColor: '#fee2e2', borderRadius: '8px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <span style={{ fontSize: '18px', fontWeight: 'bold', color: '#dc2626' }}>
              Total Expenses: {charges.reduce((sum, charge) => sum + (charge.amount || 0), 0)} DHS
            </span>
            <span style={{ fontSize: '14px', color: '#6b7280' }}>
              {charges.length} expense(s) recorded
            </span>
          </div>
        </div>
      </div>
    )}
  </div>
)}

{/* Charge Form */}
{showChargeForm && (
  <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '10px', marginBottom: '20px' }}>
    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
      <h2 style={{ margin: 0, color: '#1e3a8a' }}>
        {editingCharge ? '✏️ Edit Charge' : '💰 Add New Charge'}
      </h2>
      <button
        onClick={() => {
          setShowChargeForm(false);
          setEditingCharge(null);
          setChargeFormData({
  description: '', date: '', amount: 0, carId: '', carName: '', plateNumber: '', remarks: '', category: 'maintenance'
});
        }}
        style={{
          backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '8px 16px',
          borderRadius: '5px', cursor: 'pointer'
        }}
      >
        ✕ Cancel
      </button>
    </div>

    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '15px' }}>
      <div>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Description *
        </label>
        <input
          type="text"
          value={chargeFormData.description}
          onChange={(e) => setChargeFormData(prev => ({...prev, description: e.target.value}))}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px'
          }}
          placeholder="e.g., Oil change, Car wash, Fuel"
        />
      </div>

      <div>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Date *
        </label>
        <input
          type="date"
          value={chargeFormData.date}
          onChange={(e) => setChargeFormData(prev => ({...prev, date: e.target.value}))}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px'
          }}
        />
      </div>

      <div>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Amount (DHS) *
        </label>
        <input
          type="number"
          value={chargeFormData.amount}
          onChange={(e) => setChargeFormData(prev => ({...prev, amount: parseFloat(e.target.value) || 0}))}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px'
          }}
          placeholder="0"
          min="0"
          step="0.01"
        />
      </div>

      <div>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Category *
        </label>
        <select
          value={chargeFormData.category}
          onChange={(e) => setChargeFormData(prev => ({...prev, category: e.target.value}))}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px'
          }}
        >
          <option value="maintenance">Maintenance</option>
          <option value="fuel">Fuel</option>
          <option value="insurance">Insurance</option>
          <option value="cleaning">Cleaning</option>
          <option value="repairs">Repairs</option>
          <option value="other">Other</option>
        </select>
      </div>

     <div>
  <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
    Car (Optional)
  </label>
  <select
    value={chargeFormData.carName}
    onChange={(e) => {
      const selectedCar = cars.find(car => car.name === e.target.value);
      setChargeFormData(prev => ({
        ...prev, 
        carName: e.target.value,
        carId: selectedCar ? selectedCar.id : '',
        plateNumber: selectedCar ? selectedCar.plate_number : ''
      }));
    }}
    style={{
      width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
      fontSize: '14px'
    }}
  >
    <option value="">General/All Cars</option>
    {cars.map(car => (
      <option key={car.id} value={car.name}>{car.name} ({car.plate_number})</option>
    ))}
  </select>
</div>

{chargeFormData.plateNumber && (
  <div>
    <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
      Plate Number
    </label>
    <input
      type="text"
      value={chargeFormData.plateNumber}
      readOnly
      style={{
        width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
        fontSize: '14px', backgroundColor: '#f9fafb', color: '#6b7280'
      }}
    />
  </div>
)}
      <div style={{ gridColumn: '1 / -1' }}>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Remarks
        </label>
        <textarea
          value={chargeFormData.remarks}
          onChange={(e) => setChargeFormData(prev => ({...prev, remarks: e.target.value}))}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px', height: '60px', resize: 'vertical'
          }}
          placeholder="Additional notes about this expense..."
        />
      </div>
    </div>

    <div style={{ marginTop: '20px', textAlign: 'center' }}>
      <button
        onClick={handleChargeSubmit}
        disabled={loading}
        style={{
          backgroundColor: '#10b981', color: 'white', border: 'none', padding: '12px 30px',
          borderRadius: '5px', cursor: loading ? 'not-allowed' : 'pointer', fontSize: '16px',
          fontWeight: 'bold', opacity: loading ? 0.7 : 1
        }}
      >
        {loading ? '⏳ Saving...' : editingCharge ? '✏️ Update Charge' : '💰 Add Charge'}
      </button>
    </div>
  </div>
)}
{/* Document Management */}
{showDocuments && !showDocumentForm && (
  <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '10px', marginBottom: '20px' }}>
    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
      <h2 style={{ margin: 0, color: '#1e3a8a' }}>📄 Document Management ({documents.length})</h2>
      <div style={{ display: 'flex', gap: '10px' }}>
        <button
          onClick={() => setShowDocumentForm(true)}
          style={{
            backgroundColor: '#10b981', color: 'white', border: 'none', padding: '10px 20px',
            borderRadius: '5px', cursor: 'pointer', fontSize: '14px'
          }}
        >
          ➕ Add Document
        </button>
        <button
          onClick={() => setShowDocuments(false)}
          style={{
            backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '8px 16px',
            borderRadius: '5px', cursor: 'pointer'
          }}
        >
          ✕ Close
        </button>
      </div>
    </div>

    {/* Alert Section for Expiring/Expired Documents */}
    {(() => {
      const expiring = getExpiringDocuments();
      const expired = getExpiredDocuments();
      
      if (expiring.length > 0 || expired.length > 0) {
        return (
          <div style={{ marginBottom: '20px' }}>
            {expired.length > 0 && (
              <div style={{ backgroundColor: '#fee2e2', border: '1px solid #ef4444', borderRadius: '8px', padding: '15px', marginBottom: '10px' }}>
                <h4 style={{ color: '#dc2626', margin: '0 0 10px 0' }}>🚨 EXPIRED DOCUMENTS ({expired.length})</h4>
                {expired.map(doc => (
                  <div key={doc.id} style={{ fontSize: '14px', color: '#991b1b', marginBottom: '5px' }}>
                    • {doc.car_name} - {doc.document_type} (Expired: {formatDate(doc.end_date)})
                  </div>
                ))}
              </div>
            )}
            
            {expiring.length > 0 && (
              <div style={{ backgroundColor: '#fef3c7', border: '1px solid #f59e0b', borderRadius: '8px', padding: '15px' }}>
                <h4 style={{ color: '#d97706', margin: '0 0 10px 0' }}>⚠️ EXPIRING SOON ({expiring.length})</h4>
                {expiring.map(doc => (
                  <div key={doc.id} style={{ fontSize: '14px', color: '#92400e', marginBottom: '5px' }}>
                    • {doc.car_name} - {doc.document_type} (Expires: {formatDate(doc.end_date)})
                  </div>
                ))}
              </div>
            )}
          </div>
        );
      }
      return null;
    })()}

    {documents.length === 0 ? (
      <div style={{ textAlign: 'center', padding: '40px', color: '#6b7280' }}>
        <div style={{ fontSize: '48px', marginBottom: '10px' }}>📄</div>
        <p>No documents found. Add your first document to get started!</p>
        <button
          onClick={() => setShowDocumentForm(true)}
          style={{
            backgroundColor: '#3b82f6', color: 'white', border: 'none', padding: '10px 20px',
            borderRadius: '5px', cursor: 'pointer', marginTop: '10px'
          }}
        >
          Add First Document
        </button>
      </div>
    ) : (
      <div style={{ overflowX: 'auto' }}>
        <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '14px' }}>
          <thead>
            <tr style={{ backgroundColor: '#f3f4f6' }}>
              <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Car</th>
              <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Document Type</th>
              <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Start Date</th>
              <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>End Date</th>
              <th style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>Status</th>
              <th style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>File</th>
              <th style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>Actions</th>
            </tr>
          </thead>
          <tbody>
            {documents.map((document, index) => {
              const statusInfo = getDocumentStatus(document.end_date);
              return (
                <tr key={document.id} style={{ backgroundColor: index % 2 === 0 ? '#ffffff' : '#f9fafb' }}>
                  <td style={{ padding: '12px', border: '1px solid #d1d5db', fontWeight: 'bold' }}>
                    {document.car_name}
                  </td>
                  <td style={{ padding: '12px', border: '1px solid #d1d5db' }}>
                    {document.document_type}
                  </td>
                  <td style={{ padding: '12px', border: '1px solid #d1d5db' }}>
                    {formatDate(document.start_date)}
                  </td>
                  <td style={{ padding: '12px', border: '1px solid #d1d5db' }}>
                    {formatDate(document.end_date)}
                  </td>
                  <td style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>
                    <span style={{
                      backgroundColor: statusInfo.bgColor,
                      color: statusInfo.color,
                      padding: '4px 8px',
                      borderRadius: '12px',
                      fontSize: '12px',
                      fontWeight: 'bold'
                    }}>
                      {statusInfo.status}
                    </span>
                  </td>
                  <td style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>
                    {document.file_name ? (
                      <span style={{ fontSize: '12px', color: '#059669' }}>✅ Uploaded</span>
                    ) : (
                      <span style={{ fontSize: '12px', color: '#6b7280' }}>❌ No File</span>
                    )}
                  </td>
                  <td style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>
                    <div style={{ display: 'flex', gap: '5px', justifyContent: 'center', flexWrap: 'wrap' }}>
                      <button
                        onClick={() => handleEditDocument(document)}
                        style={{
                          backgroundColor: '#3b82f6', color: 'white', border: 'none', padding: '4px 8px',
                          borderRadius: '3px', cursor: 'pointer', fontSize: '11px'
                        }}
                      >
                        ✏️ Edit
                      </button>
                      {document.file_url && (
                        <button
                          onClick={() => downloadDocument(document)}
                          style={{
                            backgroundColor: '#059669', color: 'white', border: 'none', padding: '4px 8px',
                            borderRadius: '3px', cursor: 'pointer', fontSize: '11px'
                          }}
                        >
                          📥 Download
                        </button>
                      )}
                      <button
                        onClick={() => handleDeleteDocument(document)}
                        style={{
                          backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '4px 8px',
                          borderRadius: '3px', cursor: 'pointer', fontSize: '11px'
                        }}
                      >
                        🗑️ Delete
                      </button>
                    </div>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    )}
  </div>
)}
{/* Document Form */}
{showDocumentForm && (
  <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '10px', marginBottom: '20px' }}>
    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
      <h2 style={{ margin: 0, color: '#1e3a8a' }}>
        {editingDocument ? '✏️ Edit Document' : '📄 Add New Document'}
      </h2>
      <button
        onClick={() => {
          setShowDocumentForm(false);
          setEditingDocument(null);
          setDocumentFormData({
            carId: '', carName: '', documentType: '', startDate: '', endDate: '', file: null, fileName: ''
          });
        }}
        style={{
          backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '8px 16px',
          borderRadius: '5px', cursor: 'pointer'
        }}
      >
        ✕ Cancel
      </button>
    </div>

    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '15px' }}>
      <div>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Car *
        </label>
        <select
          value={documentFormData.carName}
          onChange={(e) => {
            const selectedCar = cars.find(car => car.name === e.target.value);
            setDocumentFormData(prev => ({
              ...prev,
              carName: e.target.value,
              carId: selectedCar ? selectedCar.id : ''
            }));
          }}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px'
          }}
        >
          <option value="">Select Car</option>
          {cars.map(car => (
            <option key={car.id} value={car.name}>{car.name}</option>
          ))}
        </select>
      </div>

      <div>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Document Type *
        </label>
        <select
          value={documentFormData.documentType}
          onChange={(e) => setDocumentFormData(prev => ({...prev, documentType: e.target.value}))}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px'
          }}
        >
          <option value="">Select Document Type</option>
          <option value="Assurance">Assurance</option>
          <option value="La visite technique">La visite technique</option>
          <option value="Autorisation de circulation">Autorisation de circulation</option>
          <option value="La vignette">La vignette</option>
          <option value="La carte grise">La carte grise</option>
        </select>
      </div>

      <div>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Start Date *
        </label>
        <input
          type="date"
          value={documentFormData.startDate}
          onChange={(e) => setDocumentFormData(prev => ({...prev, startDate: e.target.value}))}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px'
          }}
        />
      </div>

      <div>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          End Date *
        </label>
        <input
          type="date"
          value={documentFormData.endDate}
          onChange={(e) => setDocumentFormData(prev => ({...prev, endDate: e.target.value}))}
          min={documentFormData.startDate}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px'
          }}
        />
      </div>

      <div style={{ gridColumn: '1 / -1' }}>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Upload Document File
        </label>
        <input
          type="file"
          onChange={(e) => setDocumentFormData(prev => ({...prev, file: e.target.files[0]}))}
          accept=".pdf,.doc,.docx,.jpg,.jpeg,.png"
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px'
          }}
        />
        <div style={{ fontSize: '12px', color: '#6b7280', marginTop: '5px' }}>
          Accepted formats: PDF, DOC, DOCX, JPG, JPEG, PNG
        </div>
      </div>
    </div>

    {/* Document Status Preview */}
    {documentFormData.endDate && (
      <div style={{ marginTop: '20px', padding: '15px', backgroundColor: '#f0f9ff', borderRadius: '8px' }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <span style={{ fontSize: '14px', fontWeight: 'bold', color: '#0369a1' }}>
            Document Status Preview:
          </span>
          <span style={{
            ...getDocumentStatus(documentFormData.endDate),
            backgroundColor: getDocumentStatus(documentFormData.endDate).bgColor,
            color: getDocumentStatus(documentFormData.endDate).color,
            padding: '4px 12px',
            borderRadius: '12px',
            fontSize: '12px',
            fontWeight: 'bold'
          }}>
            {getDocumentStatus(documentFormData.endDate).status}
          </span>
        </div>
      </div>
    )}

    <div style={{ marginTop: '20px', textAlign: 'center' }}>
      <button
        onClick={handleDocumentSubmit}
        disabled={loading}
        style={{
          backgroundColor: '#10b981', color: 'white', border: 'none', padding: '12px 30px',
          borderRadius: '5px', cursor: loading ? 'not-allowed' : 'pointer', fontSize: '16px',
          fontWeight: 'bold', opacity: loading ? 0.7 : 1
        }}
      >
        {loading ? '⏳ Saving...' : editingDocument ? '✏️ Update Document' : '📄 Add Document'}
      </button>
    </div>
  </div>
)}
{/* Oil Changes Management */}
{showOilChanges && !showOilChangeForm && (
  <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '10px', marginBottom: '20px' }}>
    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
      <h2 style={{ margin: 0, color: '#1e3a8a' }}>🔧 Oil Changes Management ({oilChanges.length})</h2>
      <div style={{ display: 'flex', gap: '10px' }}>
        <button
          onClick={() => setShowOilChangeForm(true)}
          style={{
            backgroundColor: '#10b981', color: 'white', border: 'none', padding: '10px 20px',
            borderRadius: '5px', cursor: 'pointer', fontSize: '14px'
          }}
        >
          ➕ Add Oil Change
        </button>
        <button
          onClick={() => setShowOilChanges(false)}
          style={{
            backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '8px 16px',
            borderRadius: '5px', cursor: 'pointer'
          }}
        >
          ✕ Close
        </button>
      </div>
    </div>

    {/* Alert Section for Overdue Oil Changes */}
    {(() => {
      const overdue = getOverdueOilChanges();
      const upcoming = getUpcomingOilChanges();
      
      if (overdue.length > 0 || upcoming.length > 0) {
        return (
          <div style={{ marginBottom: '20px' }}>
            {overdue.length > 0 && (
              <div style={{ backgroundColor: '#fee2e2', border: '1px solid #ef4444', borderRadius: '8px', padding: '15px', marginBottom: '10px' }}>
                <h4 style={{ color: '#dc2626', margin: '0 0 10px 0' }}>🚨 OVERDUE OIL CHANGES ({overdue.length})</h4>
                {overdue.map(oil => (
                  <div key={oil.id} style={{ fontSize: '14px', color: '#991b1b', marginBottom: '5px' }}>
                    • {oil.car_name} - Last service: {formatDate(oil.date)} ({oil.current_km} km)
                  </div>
                ))}
              </div>
            )}
            
            {upcoming.length > 0 && (
              <div style={{ backgroundColor: '#fef3c7', border: '1px solid #f59e0b', borderRadius: '8px', padding: '15px' }}>
                <h4 style={{ color: '#d97706', margin: '0 0 10px 0' }}>⚠️ DUE FOR SERVICE SOON ({upcoming.length})</h4>
                {upcoming.map(oil => (
                  <div key={oil.id} style={{ fontSize: '14px', color: '#92400e', marginBottom: '5px' }}>
                    • {oil.car_name} - Check KM (Last: {oil.current_km} km on {formatDate(oil.date)})
                  </div>
                ))}
              </div>
            )}
          </div>
        );
      }
      return null;
    })()}

    {oilChanges.length === 0 ? (
      <div style={{ textAlign: 'center', padding: '40px', color: '#6b7280' }}>
        <div style={{ fontSize: '48px', marginBottom: '10px' }}>🔧</div>
        <p>No oil changes recorded. Add your first oil change record!</p>
        <button
          onClick={() => setShowOilChangeForm(true)}
          style={{
            backgroundColor: '#3b82f6', color: 'white', border: 'none', padding: '10px 20px',
            borderRadius: '5px', cursor: 'pointer', marginTop: '10px'
          }}
        >
          Add First Oil Change
        </button>
      </div>
    ) : (
      <div style={{ overflowX: 'auto' }}>
        <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '14px' }}>
          <thead>
            <tr style={{ backgroundColor: '#f3f4f6' }}>
              <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Car</th>
              <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Date</th>
              <th style={{ padding: '12px', textAlign: 'right', border: '1px solid #d1d5db' }}>Current KM</th>
              <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Location</th>
              <th style={{ padding: '12px', textAlign: 'left', border: '1px solid #d1d5db' }}>Items Changed</th>
              <th style={{ padding: '12px', textAlign: 'right', border: '1px solid #d1d5db' }}>Cost</th>
              <th style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>Status</th>
              <th style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>Actions</th>
            </tr>
          </thead>
          <tbody>
            {oilChanges.map((oilChange, index) => {
              const statusInfo = getOilChangeStatus(oilChange);
              return (
                <tr key={oilChange.id} style={{ backgroundColor: index % 2 === 0 ? '#ffffff' : '#f9fafb' }}>
                  <td style={{ padding: '12px', border: '1px solid #d1d5db', fontWeight: 'bold' }}>
                    {oilChange.car_name}
                    {oilChange.plate_number && (
                      <div style={{ fontSize: '12px', color: '#6b7280' }}>
                        ({oilChange.plate_number})
                      </div>
                    )}
                  </td>
                  <td style={{ padding: '12px', border: '1px solid #d1d5db' }}>
                    {formatDate(oilChange.date)}
                  </td>
                  <td style={{ padding: '12px', textAlign: 'right', border: '1px solid #d1d5db', fontWeight: 'bold' }}>
                    {oilChange.current_km.toLocaleString()} km
                  </td>
                  <td style={{ padding: '12px', border: '1px solid #d1d5db' }}>
                    {oilChange.location || 'N/A'}
                  </td>
                  <td style={{ padding: '12px', border: '1px solid #d1d5db' }}>
                    {oilChange.items_changed || 'N/A'}
                  </td>
                  <td style={{ padding: '12px', textAlign: 'right', border: '1px solid #d1d5db', color: '#dc2626', fontWeight: 'bold' }}>
                    {oilChange.cost ? `${oilChange.cost} DHS` : 'N/A'}
                  </td>
                  <td style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>
                    <span style={{
                      backgroundColor: statusInfo.bgColor,
                      color: statusInfo.color,
                      padding: '4px 8px',
                      borderRadius: '12px',
                      fontSize: '12px',
                      fontWeight: 'bold'
                    }}>
                      {statusInfo.status}
                    </span>
                  </td>
                  <td style={{ padding: '12px', textAlign: 'center', border: '1px solid #d1d5db' }}>
                    <div style={{ display: 'flex', gap: '5px', justifyContent: 'center' }}>
                      <button
                        onClick={() => handleEditOilChange(oilChange)}
                        style={{
                          backgroundColor: '#3b82f6', color: 'white', border: 'none', padding: '4px 8px',
                          borderRadius: '3px', cursor: 'pointer', fontSize: '11px'
                        }}
                      >
                        ✏️ Edit
                      </button>
                      <button
                        onClick={() => handleDeleteOilChange(oilChange)}
                        style={{
                          backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '4px 8px',
                          borderRadius: '3px', cursor: 'pointer', fontSize: '11px'
                        }}
                      >
                        🗑️ Delete
                      </button>
                    </div>
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
    )}
  </div>
)}
{/* Oil Change Form */}
{showOilChangeForm && (
  <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '10px', marginBottom: '20px' }}>
    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
      <h2 style={{ margin: 0, color: '#1e3a8a' }}>
        {editingOilChange ? '✏️ Edit Oil Change' : '🔧 Add New Oil Change'}
      </h2>
      <button
        onClick={() => {
          setShowOilChangeForm(false);
          setEditingOilChange(null);
          setOilChangeFormData({
            carId: '', carName: '', plateNumber: '', date: '', location: '', 
            currentKm: 0, itemsChanged: '', cost: 0, nextServiceKm: 0, remarks: ''
          });
        }}
        style={{
          backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '8px 16px',
          borderRadius: '5px', cursor: 'pointer'
        }}
      >
        ✕ Cancel
      </button>
    </div>

    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '15px' }}>
      <div>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Car *
        </label>
        <select
          value={oilChangeFormData.carName}
          onChange={(e) => {
            const selectedCar = cars.find(car => car.name === e.target.value);
            setOilChangeFormData(prev => ({
              ...prev,
              carName: e.target.value,
              carId: selectedCar ? selectedCar.id : '',
              plateNumber: selectedCar ? selectedCar.plate_number : ''
            }));
          }}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px'
          }}
        >
          <option value="">Select Car</option>
          {cars.map(car => (
            <option key={car.id} value={car.name}>{car.name} ({car.plate_number})</option>
          ))}
        </select>
      </div>

      {oilChangeFormData.plateNumber && (
        <div>
          <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
            Plate Number
          </label>
          <input
            type="text"
            value={oilChangeFormData.plateNumber}
            readOnly
            style={{
              width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
              fontSize: '14px', backgroundColor: '#f9fafb', color: '#6b7280'
            }}
          />
        </div>
      )}

      <div>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Service Date *
        </label>
        <input
          type="date"
          value={oilChangeFormData.date}
          onChange={(e) => setOilChangeFormData(prev => ({...prev, date: e.target.value}))}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px'
          }}
        />
      </div>

      <div>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Service Location
        </label>
        <input
          type="text"
          value={oilChangeFormData.location}
          onChange={(e) => setOilChangeFormData(prev => ({...prev, location: e.target.value}))}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px'
          }}
          placeholder="e.g., Quick Change Station"
        />
      </div>

      <div>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Current KM *
        </label>
        <input
          type="number"
          value={oilChangeFormData.currentKm}
          onChange={(e) => setOilChangeFormData(prev => ({...prev, currentKm: parseInt(e.target.value) || 0}))}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px'
          }}
          placeholder="Current odometer reading"
          min="0"
        />
      </div>

      <div>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Items Changed
        </label>
        <input
          type="text"
          value={oilChangeFormData.itemsChanged}
          onChange={(e) => setOilChangeFormData(prev => ({...prev, itemsChanged: e.target.value}))}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px'
          }}
          placeholder="e.g., Oil, Filter, Air filter"
        />
      </div>

      <div>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Service Cost (DHS)
        </label>
        <input
          type="number"
          value={oilChangeFormData.cost}
          onChange={(e) => setOilChangeFormData(prev => ({...prev, cost: parseFloat(e.target.value) || 0}))}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px'
          }}
          placeholder="0"
          min="0"
          step="0.01"
        />
      </div>

      <div>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Next Service KM
        </label>
        <input
          type="number"
          value={oilChangeFormData.nextServiceKm}
          onChange={(e) => setOilChangeFormData(prev => ({...prev, nextServiceKm: parseInt(e.target.value) || 0}))}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px'
          }}
          placeholder="Next service at KM"
          min="0"
        />
        <div style={{ fontSize: '12px', color: '#6b7280', marginTop: '3px' }}>
          {oilChangeFormData.currentKm > 0 && (
            `Suggested: ${oilChangeFormData.currentKm + 10000} KM (10,000 KM interval)`
          )}
        </div>
      </div>

      <div style={{ gridColumn: '1 / -1' }}>
        <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
          Remarks
        </label>
        <textarea
          value={oilChangeFormData.remarks}
          onChange={(e) => setOilChangeFormData(prev => ({...prev, remarks: e.target.value}))}
          style={{
            width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
            fontSize: '14px', height: '60px', resize: 'vertical'
          }}
          placeholder="Additional notes about the service..."
        />
      </div>
    </div>

    <div style={{ marginTop: '20px', textAlign: 'center' }}>
      <button
        onClick={handleOilChangeSubmit}
        disabled={loading}
        style={{
          backgroundColor: '#10b981', color: 'white', border: 'none', padding: '12px 30px',
          borderRadius: '5px', cursor: loading ? 'not-allowed' : 'pointer', fontSize: '16px',
          fontWeight: 'bold', opacity: loading ? 0.7 : 1
        }}
      >
        {loading ? '⏳ Saving...' : editingOilChange ? '✏️ Update Oil Change' : '🔧 Add Oil Change'}
      </button>
    </div>
  </div>
)}
{/* Car Grid - Main View */}
{!showBookingForm && !showReservations && !showClients && !showClientForm && !showFreePeriods && !showStats && !showCharges && !showChargeForm && !showCarManagement && !showCarForm && !showDocuments && !showDocumentForm && !showOilChanges && !showOilChangeForm && (          <>
            {/* Filter Section */}
            <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '10px', marginBottom: '20px' }}>
              <h3 style={{ margin: '0 0 15px 0', color: '#1e3a8a' }}>🔍 Filter Available Cars</h3>
              <div style={{ display: 'flex', gap: '15px', alignItems: 'end', flexWrap: 'wrap' }}>
                <div>
                  <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                    Start Date
                  </label>
                  <input
                    type="date"
                    value={filterDates.start}
                    onChange={(e) => setFilterDates(prev => ({...prev, start: e.target.value}))}
                    style={{
                      padding: '8px', border: '1px solid #d1d5db', borderRadius: '5px', fontSize: '14px'
                    }}
                  />
                </div>
                <div>
                  <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                    End Date
                  </label>
                  <input
                    type="date"
                    value={filterDates.end}
                    onChange={(e) => setFilterDates(prev => ({...prev, end: e.target.value}))}
                    style={{
                      padding: '8px', border: '1px solid #d1d5db', borderRadius: '5px', fontSize: '14px'
                    }}
                  />
                </div>
                <button
                  onClick={handleShowAvailable}
                  style={{
                    backgroundColor: '#10b981', color: 'white', border: 'none', padding: '10px 20px',
                    borderRadius: '5px', cursor: 'pointer', fontSize: '14px'
                  }}
                >
                  🔍 Show Available Only
                </button>
                {showAvailableOnly && (
                  <button
                    onClick={clearFilter}
                    style={{
                      backgroundColor: '#6b7280', color: 'white', border: 'none', padding: '10px 20px',
                      borderRadius: '5px', cursor: 'pointer', fontSize: '14px'
                    }}
                  >
                    ✕ Clear Filter
                  </button>
                )}
              </div>
              {showAvailableOnly && (
                <div style={{ 
                  marginTop: '10px', padding: '10px', backgroundColor: '#dcfce7', 
                  borderRadius: '5px', color: '#166534', fontSize: '14px' 
                }}>
                  ✅ Showing {getFilteredCars().length} available cars for {formatDate(filterDates.start)} - {formatDate(filterDates.end)}
                </div>
              )}
            </div>

            {/* Cars Grid */}
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: 'repeat(auto-fill, minmax(320px, 1fr))', 
              gap: '20px' 
            }}>
              {getFilteredCars().map(car => (
                <div key={car.id} style={{
                  backgroundColor: 'white', borderRadius: '15px', padding: '20px',
                  boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)', border: '1px solid #e5e7eb',
                  transition: 'transform 0.2s, box-shadow 0.2s'
                }} 
                onMouseEnter={(e) => {
                  e.currentTarget.style.transform = 'translateY(-2px)';
                  e.currentTarget.style.boxShadow = '0 8px 25px rgba(0, 0, 0, 0.15)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.transform = 'translateY(0)';
                  e.currentTarget.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';
                }}>
                  <div style={{ 
                    display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start',
                    marginBottom: '15px'
                  }}>
                    <h3 style={{ 
                      margin: 0, color: '#1e3a8a', fontSize: '16px', fontWeight: 'bold',
                      lineHeight: '1.2', flex: 1
                    }}>
                      {car.name}
                    </h3>
{(() => {
  const today = new Date().toISOString().split('T')[0];
  
  // Check if car is currently rented
  const isCurrentlyRented = clients.some(client => {
    if (client.car_name === car.name) {
      return today >= client.start_date && today <= client.end_date;
    }
    return false;
  }) || (bookings[car.id] && bookings[car.id].some(booking => {
    return today >= booking.start && today <= booking.end;
  }));
  
  if (isCurrentlyRented) {
    return (
      <div style={{
        backgroundColor: '#fee2e2', color: '#dc2626', padding: '4px 8px',
        borderRadius: '12px', fontSize: '11px', fontWeight: 'bold',
        marginBottom: '10px', textAlign: 'center'
      }}>
        CURRENTLY RENTED
      </div>
    );
  }
  return null;
})()}
                   {showAvailableOnly && (
                      <div style={{
                        backgroundColor: isCarAvailable(car.id, filterDates.start, filterDates.end) ? '#dcfce7' : '#fee2e2',
                        color: isCarAvailable(car.id, filterDates.start, filterDates.end) ? '#166534' : '#dc2626',
                        padding: '4px 8px', borderRadius: '12px', fontSize: '11px', fontWeight: 'bold',
                        marginLeft: '10px'
                      }}>
                        {isCarAvailable(car.id, filterDates.start, filterDates.end) ? 'Available' : 'Booked'}
                      </div>
                    )}
                  </div>
                  
                  <div style={{ marginBottom: '15px' }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '8px' }}>
                      <span style={{ color: '#6b7280', fontSize: '14px' }}>💺 {car.seats} seats</span>
                      <span style={{ color: '#6b7280', fontSize: '14px' }}>⛽ {car.fuel}</span>
                    </div>
                    <div style={{ 
                      fontSize: '24px', fontWeight: 'bold', color: '#059669',
                      textAlign: 'center', marginBottom: '10px'
                    }}>
                      {car.price} DHS/day
                    </div>
                  </div>

                  {/* Current bookings for this car */}
                  {bookings[car.id] && bookings[car.id].length > 0 && (
                    <div style={{ marginBottom: '15px' }}>
                      <div style={{ fontSize: '12px', fontWeight: 'bold', color: '#ef4444', marginBottom: '5px' }}>
                        📅 Current Bookings:
                      </div>
                      {bookings[car.id].slice(0, 2).map((booking, index) => (
                        <div key={index} style={{ 
                          fontSize: '11px', color: '#6b7280', marginBottom: '3px',
                          padding: '3px 6px', backgroundColor: '#fef3c7', borderRadius: '3px'
                        }}>
                          {formatDate(booking.start)} - {formatDate(booking.end)}
                        </div>
                      ))}
                      {bookings[car.id].length > 2 && (
                        <div style={{ fontSize: '10px', color: '#6b7280', fontStyle: 'italic' }}>
                          +{bookings[car.id].length - 2} more booking(s)
                        </div>
                      )}
                    </div>
                  )}

                  <button
                    onClick={() => {
                      setSelectedCar(car);
                      setShowBookingForm(true);
                    }}
                    style={{
                      width: '100%', backgroundColor: '#1e3a8a', color: 'white', border: 'none',
                      padding: '12px', borderRadius: '8px', cursor: 'pointer', fontSize: '14px',
                      fontWeight: 'bold', transition: 'background-color 0.2s'
                    }}
                    onMouseEnter={(e) => e.target.style.backgroundColor = '#1e40af'}
                    onMouseLeave={(e) => e.target.style.backgroundColor = '#1e3a8a'}
                  >
                    📅 Book This Car
                  </button>
                </div>
              ))}
            </div>
          </>
        )}
{/* Booking Form */}
        {showBookingForm && selectedCar && (
          <div style={{ backgroundColor: 'white', padding: '20px', borderRadius: '10px' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
              <h2 style={{ margin: 0, color: '#1e3a8a' }}>
                {editingReservation ? '✏️ Edit Reservation' : '📅 Book'} {selectedCar.name}
              </h2>
              <button
                onClick={() => {
                  setShowBookingForm(false);
                  setSelectedCar(null);
                  setEditingReservation(null);
                  setSelectedDates({ start: '', end: '' });
                  setCustomerInfo({ name: '', email: '', phone: '', arrivalTime: '', departureTime: '', remarks: '' });
                }}
                style={{
                  backgroundColor: '#ef4444', color: 'white', border: 'none', padding: '8px 16px',
                  borderRadius: '5px', cursor: 'pointer'
                }}
              >
                ✕ Cancel
              </button>
            </div>

            <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '15px', marginBottom: '20px' }}>
              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Start Date *
                </label>
                <input
                  type="date"
                  value={selectedDates.start}
                  onChange={(e) => setSelectedDates(prev => ({...prev, start: e.target.value}))}
                  min={new Date().toISOString().split('T')[0]}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px'
                  }}
                />
              </div>
              
              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  End Date *
                </label>
                <input
                  type="date"
                  value={selectedDates.end}
                  onChange={(e) => setSelectedDates(prev => ({...prev, end: e.target.value}))}
                  min={selectedDates.start || new Date().toISOString().split('T')[0]}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px'
                  }}
                />
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Customer Name *
                </label>
                <input
                  type="text"
                  value={customerInfo.name}
                  onChange={(e) => setCustomerInfo(prev => ({...prev, name: e.target.value}))}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px'
                  }}
                  placeholder="Enter customer name"
                />
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Email
                </label>
                <input
                  type="email"
                  value={customerInfo.email}
                  onChange={(e) => setCustomerInfo(prev => ({...prev, email: e.target.value}))}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px'
                  }}
                  placeholder="customer@example.com"
                />
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Phone
                </label>
                <input
                  type="tel"
                  value={customerInfo.phone}
                  onChange={(e) => setCustomerInfo(prev => ({...prev, phone: e.target.value}))}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px'
                  }}
                  placeholder="+212600000000"
                />
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Arrival Time
                </label>
                <input
                  type="time"
                  value={customerInfo.arrivalTime}
                  onChange={(e) => setCustomerInfo(prev => ({...prev, arrivalTime: e.target.value}))}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px'
                  }}
                />
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Departure Time
                </label>
                <input
                  type="time"
                  value={customerInfo.departureTime}
                  onChange={(e) => setCustomerInfo(prev => ({...prev, departureTime: e.target.value}))}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px'
                  }}
                />
              </div>

              <div style={{ gridColumn: '1 / -1' }}>
                <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold', color: '#374151' }}>
                  Remarks
                </label>
                <textarea
                  value={customerInfo.remarks}
                  onChange={(e) => setCustomerInfo(prev => ({...prev, remarks: e.target.value}))}
                  style={{
                    width: '100%', padding: '10px', border: '1px solid #d1d5db', borderRadius: '5px',
                    fontSize: '14px', height: '60px', resize: 'vertical'
                  }}
                  placeholder="Special requests, pickup location, etc."
                />
              </div>
            </div>

            {/* Total calculation */}
            {selectedDates.start && selectedDates.end && (
              <div style={{ 
                backgroundColor: '#f0f9ff', padding: '15px', borderRadius: '8px', marginBottom: '20px',
                border: '1px solid #0ea5e9'
              }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <span style={{ fontSize: '18px', fontWeight: 'bold', color: '#0369a1' }}>
                    Total Amount: {calculateTotal()} DHS
                  </span>
                  <span style={{ fontSize: '14px', color: '#6b7280' }}>
                    {Math.ceil((new Date(selectedDates.end) - new Date(selectedDates.start)) / (1000 * 60 * 60 * 24)) || 1} day(s) × {selectedCar.price} DHS
                  </span>
                </div>
              </div>
            )}

            {selectedDates.start && selectedDates.end && (() => {
  const hasConflict = checkDateConflict(selectedDates.start, selectedDates.end, selectedCar.id, editingReservation ? editingReservation.id : null);
  
  if (hasConflict) {
    // Find what's causing the conflict
    const bookingConflict = bookings[selectedCar.id] && bookings[selectedCar.id].some(booking => {
      if (editingReservation && booking.id === editingReservation.id) return false;
      return (selectedDates.start <= booking.end && selectedDates.end >= booking.start);
    });
    
    const clientConflict = clients.find(client => {
      if (client.car_name === selectedCar.name) {
        return (selectedDates.start <= client.end_date && selectedDates.end >= client.start_date);
      }
      return false;
    });
    
    return (
      <div style={{ 
        backgroundColor: '#fee2e2', padding: '15px', borderRadius: '8px', marginBottom: '20px',
        border: '1px solid #ef4444', color: '#dc2626'
      }}>
        Warning: These dates conflict with an existing {bookingConflict ? 'reservation' : 'client rental'}.
        {clientConflict && (
          <div style={{ marginTop: '5px', fontSize: '14px' }}>
            Conflicting client: {clientConflict.client_name} ({formatDate(clientConflict.start_date)} - {formatDate(clientConflict.end_date)})
          </div>
        )}
        Please choose different dates.
      </div>
    );
  }
  return null;
})()}

            <div style={{ textAlign: 'center' }}>
              <button
                onClick={handleBooking}
                disabled={loading || !selectedDates.start || !selectedDates.end || !customerInfo.name || 
                         checkDateConflict(selectedDates.start, selectedDates.end, selectedCar.id, editingReservation ? editingReservation.id : null)}
                style={{
                  backgroundColor: '#10b981', color: 'white', border: 'none', padding: '15px 30px',
                  borderRadius: '8px', cursor: loading ? 'not-allowed' : 'pointer', fontSize: '16px',
                  fontWeight: 'bold', opacity: loading || !selectedDates.start || !selectedDates.end || !customerInfo.name || 
                                      checkDateConflict(selectedDates.start, selectedDates.end, selectedCar.id, editingReservation ? editingReservation.id : null) ? 0.5 : 1
                }}
              >
                {loading ? '⏳ Processing...' : editingReservation ? '✏️ Update Reservation' : '✅ Confirm Booking'}
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default RentalCarApp;